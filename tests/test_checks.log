============================= test session starts ==============================
platform linux -- Python 3.11.8, pytest-8.2.0, pluggy-1.5.0 -- /lus/eagle/projects/FoundEpidem/avasan/IDEAL/DiffusionModels/protein_lig_sedd/prot_lig_sedd/bin/python
cachedir: .pytest_cache
rootdir: /lus/eagle/projects/FoundEpidem/avasan/IDEAL/DiffusionModels/diffusion_repo_clean/protein_lig_sedd
plugins: typeguard-2.13.3, Faker-25.0.0, jaxtyping-0.2.28, anyio-4.3.0, hydra-core-1.3.2
collecting ... intel_extension_for_pytorch not found, running on CPU/cuda
collected 5 items

tests/test_checkpoint_resume.py::TestCheckpointResume::test_checkpoint_creation [{'prot_tokens': tensor([20, 12, 23,  0,  0,  5, 20,  2,  1, 19,  9,  5,  0, 14, 17,  4,  1,  7,
        15, 18,  2,  6,  8, 12, 14, 10,  2,  9, 14,  6,  5, 20])}, {'prot_tokens': tensor([ 8, 23,  9, 14,  5, 14,  6,  1, 15,  2, 15,  6, 17,  8, 21,  0, 22,  7,
        13, 16, 13, 17,  8, 15, 11,  2, 14,  4, 17, 21, 12,  9])}, {'prot_tokens': tensor([ 5, 21,  4,  2,  0,  0,  7,  5, 10, 10, 14, 21, 17, 18,  6,  5, 19,  9,
         6, 10, 18, 22,  2, 19, 20,  7,  6, 13, 18, 21, 23,  3])}, {'prot_tokens': tensor([ 1,  2, 20,  1, 14, 19,  3,  4,  9,  7, 11,  3, 11, 17,  8, 22,  0, 23,
        15,  7, 12,  5, 11, 14,  4, 10,  0,  5, 14,  3, 17,  3])}, {'prot_tokens': tensor([ 0, 16, 22,  6, 22, 11,  9, 13,  6, 18,  2, 19, 18,  4, 21, 17, 21,  6,
         1, 18, 15,  3,  7, 12,  0, 13,  1, 14, 10,  0, 22,  5])}, {'prot_tokens': tensor([15, 23, 12,  3, 13,  3, 22,  3, 18,  4,  2, 10, 12, 13, 16, 16,  9, 10,
         8,  9, 20, 15, 13, 19, 21,  0, 23,  0, 14,  0, 14, 23])}, {'prot_tokens': tensor([ 5,  6, 13, 13, 20, 14, 18, 16, 10, 23, 10,  1, 19, 16,  4, 11, 23, 11,
        19,  2, 17, 23, 17,  7, 21,  0,  2, 16,  3, 12,  6, 20])}, {'prot_tokens': tensor([ 6, 15,  2, 18, 21, 16,  6, 14, 10, 15,  3, 13, 11, 16, 11, 13,  9,  6,
        20, 18, 16, 13, 19, 22, 16, 14,  9,  2, 18,  3,  3,  2])}, {'prot_tokens': tensor([14, 22, 15, 15, 17,  4, 13, 19, 15, 12, 12, 10, 20, 15,  2, 10, 22, 16,
         5,  9, 19, 22,  5,  2, 22, 23, 14, 20, 22, 11, 10,  9])}, {'prot_tokens': tensor([11, 16, 23,  3, 14, 14,  4,  0, 10,  5, 16, 10, 11, 19,  1,  2,  6, 15,
        12,  4,  4, 15, 12, 21,  7, 11, 15,  4, 17,  9,  9, 17])}, {'prot_tokens': tensor([ 4,  2,  9, 23,  4, 17, 20,  2,  1, 20,  8,  9, 15, 22, 21,  5, 20, 14,
        10, 17, 20, 15,  9, 14,  1, 12,  6, 19, 20,  5, 17, 19])}, {'prot_tokens': tensor([ 6,  3, 23, 11,  5, 18,  7,  9,  1, 17,  5, 22, 17, 14, 10,  7,  5,  6,
         8,  7, 18,  0,  2, 19,  2,  0,  3,  3, 12,  8, 12,  0])}, {'prot_tokens': tensor([19,  4, 14,  9, 16,  1, 18, 15,  6, 15, 13,  1, 15, 20, 22, 13,  6,  1,
        19, 14, 13, 13, 14,  1, 14, 10, 15,  9,  3,  4, 10, 23])}, {'prot_tokens': tensor([13, 22, 15,  9,  9, 18,  4, 22,  1, 13, 11,  1,  6, 17, 18, 10,  1, 16,
        22,  8,  5, 23,  3, 22,  2, 19, 23, 17,  1, 19, 18, 11])}, {'prot_tokens': tensor([15, 16,  1, 10,  8,  8, 18,  9, 22,  8,  3, 18,  9, 18,  9, 10,  1, 23,
         3,  9, 22, 19, 19,  9,  3,  0,  1, 15, 18,  5, 20,  5])}, {'prot_tokens': tensor([ 0, 13,  6,  0, 18, 19, 23, 12,  9,  9,  7,  0, 11, 20,  8, 13, 19, 18,
         5,  6, 13, 19,  2, 15,  4,  1, 20, 11, 10,  1,  9, 17])}, {'prot_tokens': tensor([ 5, 16, 16,  8,  8, 18,  8,  7, 20,  3, 22, 16, 18,  1, 18, 14, 23, 23,
        19, 12, 18,  9, 18, 12, 17,  5,  4,  3, 19, 11,  2,  5])}, {'prot_tokens': tensor([22, 13, 16,  2, 21,  3, 20,  1,  1,  3, 23, 16,  2,  6, 12, 13,  8, 23,
        14, 10, 11,  7, 12, 10, 18, 14,  3, 16, 19, 18,  4,  8])}, {'prot_tokens': tensor([13, 13, 21,  3,  5, 21,  9, 19, 18, 11, 16, 22,  7, 23, 14, 10,  7,  8,
        12, 15,  9,  2,  3,  9,  6, 21, 18,  2, 23, 22,  9, 23])}, {'prot_tokens': tensor([ 9, 19, 15,  7,  9,  6, 22,  4, 15, 13,  5,  3,  0,  7, 13, 17, 11, 10,
         5, 23, 21, 21, 12, 12, 22,  5, 18,  0,  3, 23, 17,  3])}, {'prot_tokens': tensor([22, 19,  0,  9,  3,  4, 11, 13, 14, 23, 12, 21,  4, 18, 23, 12,  4,  6,
        18,  2, 23, 21,  3,  6, 23, 11, 23, 18, 21,  8,  6, 22])}, {'prot_tokens': tensor([ 0,  3, 13, 12,  0,  3, 21, 12,  0,  0, 18,  6,  0, 13, 15, 22,  9, 13,
        21, 21,  0, 14, 22,  1, 12, 11,  1,  8,  6,  5, 11, 11])}, {'prot_tokens': tensor([15, 18, 14, 21, 15, 16, 13, 18, 19, 13, 17, 14,  0, 13, 11,  4,  3,  0,
        11, 20, 10,  7,  9, 21,  3,  6,  8,  7,  4, 12, 14,  7])}, {'prot_tokens': tensor([13, 20,  4, 18,  7, 14,  2, 17, 20, 21, 15,  2, 11, 23,  9,  7, 13,  1,
        15, 18, 16, 12, 13, 21,  9,  3, 21, 21, 10,  1,  0,  5])}, {'prot_tokens': tensor([ 4, 14,  7, 13, 16,  8,  5, 14,  9, 22, 18,  3,  5, 12, 20,  7, 22,  0,
         0,  6,  7, 10, 11, 10,  5, 13, 10, 16, 15,  7, 10, 23])}, {'prot_tokens': tensor([ 4,  5,  6,  4, 11,  0, 20,  8,  3,  6, 19, 10, 23, 20, 13, 17,  4,  9,
        15,  5, 20, 13, 18,  8, 22,  9, 22,  6,  1,  3, 15, 19])}, {'prot_tokens': tensor([22, 10, 17, 23,  4, 10, 12,  4, 23, 14, 11, 20, 13, 10,  4,  5, 16,  5,
         3, 15,  4, 11, 12, 13,  7, 10, 14, 10,  6,  0,  7,  6])}, {'prot_tokens': tensor([ 9, 14, 19, 19,  4,  0,  8, 18, 23, 16, 11,  1,  2, 16, 18,  9, 13,  1,
         9, 10, 23, 14, 19, 14, 11, 14,  6,  5, 22, 10, 20, 23])}, {'prot_tokens': tensor([ 7, 19,  0, 15,  9,  3, 15, 10, 23,  9, 16,  9,  3, 12, 15,  7,  0,  7,
         4,  5,  3, 15, 19,  3, 17,  7,  2,  1, 12, 12,  9, 17])}, {'prot_tokens': tensor([ 3, 21, 15,  0,  3, 18,  2,  7, 13,  6,  5,  7, 18,  9, 20, 19, 10,  5,
        17,  0, 14,  4, 21, 18,  3, 11, 18, 21,  0, 21, 22, 23])}, {'prot_tokens': tensor([10, 18,  1,  2, 19, 18, 12,  3, 15,  7,  0, 19,  3, 15, 16, 17,  8,  3,
         2,  3, 16,  3, 11, 20, 13, 23, 19, 20, 12, 23, 20, 10])}, {'prot_tokens': tensor([22, 22, 15,  0, 18,  6,  9,  5, 15,  0, 14, 18,  2,  3,  0,  1,  1,  0,
        20, 22,  5,  9, 11,  9, 10, 13,  9,  7, 14, 21,  3, 12])}, {'prot_tokens': tensor([ 2,  7,  0,  2, 16, 19, 11, 13,  8, 20,  6,  0,  6, 17, 15,  2,  0,  7,
        18,  5, 21,  8,  7,  6, 21,  5, 23, 20,  8, 16,  2,  6])}, {'prot_tokens': tensor([14, 20,  8,  2,  9,  7,  4,  8,  6, 10, 13,  9,  9, 22,  5, 15, 16, 18,
        13,  4, 18,  5, 12, 19, 23,  3, 16,  4, 12, 12,  7, 21])}, {'prot_tokens': tensor([ 1, 19,  4, 14,  0, 22,  4,  1, 11,  9,  7,  4, 14, 19,  5,  4, 20,  7,
         2, 13, 23, 20,  5, 21, 23, 17,  4, 10, 23, 13, 21,  4])}, {'prot_tokens': tensor([18,  2, 10, 19, 13,  1, 15,  9,  8,  3, 10,  1, 17,  9,  4, 16,  5, 21,
        17, 11,  4,  8,  9, 23, 10,  1, 19, 20, 18,  6,  2,  3])}, {'prot_tokens': tensor([18,  6,  0,  3, 13, 11,  6, 21, 14, 19, 21, 15, 13, 10, 18,  8,  0, 21,
        20,  4, 23,  5,  3, 20, 18,  8,  7, 20, 18, 12, 10, 22])}, {'prot_tokens': tensor([12,  3, 11, 17,  7, 11, 11, 22, 12, 14,  4,  3, 20,  0, 20,  4,  5,  6,
         3, 11,  0, 22, 13, 18, 23, 13, 15, 12, 19, 10, 15, 16])}, {'prot_tokens': tensor([ 0, 12, 15, 21,  2, 23, 14, 23, 12, 23, 19, 20, 10,  3, 23,  3, 14, 12,
        20,  9,  4, 15, 12, 17,  0, 20, 20, 14, 14,  4, 12, 12])}, {'prot_tokens': tensor([ 6, 21,  5,  0, 23,  5, 23, 15,  6,  9,  3,  4, 20, 19, 13, 12,  2,  3,
         5, 12, 19,  2,  7, 13, 14, 23, 18,  4, 18,  2, 13, 10])}, {'prot_tokens': tensor([ 4, 10, 23, 21,  6, 20,  1, 19, 18, 23, 22, 12, 20,  1,  5, 19,  5, 21,
        23, 10, 12, 10, 17, 22,  7,  1, 22,  0, 20, 17,  9, 12])}, {'prot_tokens': tensor([15, 16, 18, 13, 18,  2, 16, 12, 11, 16, 15,  9, 20,  1,  9, 19,  4,  7,
         6, 17,  0,  1, 10, 20,  8,  7, 23,  8,  6, 18,  0,  2])}, {'prot_tokens': tensor([ 3, 18, 14, 15,  8, 13,  7, 11,  7, 11, 16,  8, 17,  3, 14, 15,  6, 20,
        16, 14,  4, 21, 10, 16,  5, 11, 19,  0, 20, 10, 15,  8])}, {'prot_tokens': tensor([10,  0,  6, 10,  0, 16, 16,  8, 18,  7,  2,  5, 22, 20, 15, 19, 14,  6,
        19,  9,  8, 19,  1, 21, 22, 12, 18, 12, 20,  1,  1, 15])}, {'prot_tokens': tensor([10, 19, 23,  2, 18, 20, 17, 12, 16, 14,  1,  4,  5, 21, 18, 11,  7,  9,
        12, 22,  7, 16, 11, 17, 19,  0, 13, 18,  1,  8,  6, 13])}, {'prot_tokens': tensor([21,  0, 16,  6, 21,  3, 11, 20,  2,  5,  0,  2,  2,  4,  2, 21,  3, 15,
         2,  2,  1, 12, 15, 11, 13, 11,  8, 12,  7, 16, 22,  2])}, {'prot_tokens': tensor([ 9, 16,  4,  0, 12,  1, 13, 12, 19,  7,  2, 20, 16, 18, 22, 11, 10,  7,
        19,  0, 13,  5,  5,  7,  1, 14,  3,  7,  9,  0, 10, 17])}, {'prot_tokens': tensor([ 8,  6,  7, 18, 16, 19, 13,  6,  6,  4,  0,  0, 17, 22, 17,  2,  2,  8,
         9, 22, 14, 14, 13,  0,  8, 21, 21,  1, 20,  3,  6,  6])}, {'prot_tokens': tensor([ 8,  7, 15,  3,  3, 11, 12,  6, 11,  5,  5, 13,  3, 10, 16,  0, 13,  4,
        11, 14, 22, 11,  4, 18, 18, 10, 18,  5,  3, 23, 12,  4])}, {'prot_tokens': tensor([18,  6,  9,  6,  6,  1,  1, 17, 17, 15,  8, 18,  8, 19,  9, 22, 20,  9,
         6, 12,  5, 10, 13,  5,  9,  7,  9, 14, 20, 16,  5, 12])}, {'prot_tokens': tensor([17, 19, 14, 11,  5,  0, 18, 16,  5, 17, 20,  3, 22, 20, 22, 20,  5, 22,
        21, 22, 14,  0,  3,  9,  0,  9,  6, 18,  4,  2,  0, 10])}, {'prot_tokens': tensor([15, 20,  8, 12, 23, 18, 11, 22,  8, 12, 20, 17, 13, 16, 17, 13, 12, 20,
        23,  8, 16,  5, 18,  9,  8, 12, 16,  4, 12, 10, 13,  0])}, {'prot_tokens': tensor([11,  0, 21,  0,  6, 14, 18, 16,  8, 12, 17, 20, 19, 13, 19, 14, 16,  9,
        14, 17,  1,  1,  1, 20, 21, 11, 16,  2, 19, 23, 16, 22])}, {'prot_tokens': tensor([ 1,  2, 20,  0,  8,  3, 21, 10,  2,  6, 15, 10, 10,  1, 20, 10, 16,  4,
        16, 17, 14, 20, 20, 15,  3,  5, 18, 14,  1,  2,  8, 20])}, {'prot_tokens': tensor([ 5, 20,  5, 20, 12, 12, 14, 21, 14, 12, 18, 19, 10,  4, 14,  6, 15, 22,
         3,  9, 19,  9,  8,  5,  3,  0,  4, 11,  2,  5, 14,  2])}, {'prot_tokens': tensor([ 1, 21, 18, 20,  8, 14, 16,  2, 18,  7,  3,  4, 11, 10,  7,  0, 15,  5,
        13,  4, 19, 15,  4,  5,  6,  3, 17,  0, 19, 12,  8, 12])}, {'prot_tokens': tensor([ 4, 15,  8, 17, 20,  9, 10,  9,  1,  6, 16, 15, 18, 23, 21, 22,  9,  5,
         6, 23, 10, 13,  0, 18, 14,  4, 21, 19,  3,  2, 12, 14])}, {'prot_tokens': tensor([22,  0,  6, 19, 18, 10, 11,  3, 14, 18, 10, 22, 15, 14, 21, 22, 18, 10,
        10, 10, 12, 22, 16,  4,  6, 16, 12, 11, 10,  1, 20,  5])}, {'prot_tokens': tensor([23, 18,  1, 23,  2, 16, 19, 15,  5, 23, 20,  9, 11,  5, 16,  7,  9, 14,
        15,  7, 22, 19, 16, 22,  1, 18, 11,  9,  3,  7, 20, 19])}, {'prot_tokens': tensor([ 2,  0, 22, 18,  1, 20,  9,  7,  6, 20,  6, 22, 12,  7, 22, 16, 23, 16,
         8,  9,  9, 16, 15,  7, 22, 13, 16,  9, 18, 16,  0, 13])}, {'prot_tokens': tensor([19, 20, 14, 20,  5,  3, 18,  7, 16, 22, 20, 15,  3,  3,  5, 15, 13, 14,
        13, 17, 17,  7,  7, 12,  5, 18, 21, 19, 20, 19,  4,  2])}, {'prot_tokens': tensor([13, 14, 12, 14,  4, 11, 18,  0,  8, 14, 16,  1, 15,  7,  5,  2, 23, 11,
        23, 13, 18, 11, 23,  7, 13,  8, 20, 10,  8, 23, 16,  7])}, {'prot_tokens': tensor([ 7,  0, 21, 21, 13, 17, 13, 19,  5,  5,  3,  7, 14, 18, 18, 14,  8,  0,
        16,  7, 22,  2,  7, 22, 20,  7, 16,  3,  1,  1, 23,  4])}, {'prot_tokens': tensor([ 8, 18, 13,  3, 19, 17, 10,  8, 10, 14, 12,  8,  8, 14, 21,  0, 17,  7,
        10,  9, 11,  2, 10, 11,  1,  8, 14, 19, 21, 17, 14,  8])}, {'prot_tokens': tensor([11, 23, 12,  8, 12, 17,  1,  1,  8,  8,  4,  7,  5, 11, 20, 21, 17, 11,
         1, 15, 20,  6, 23,  0, 18,  9, 22, 12, 13, 10, 13, 14])}, {'prot_tokens': tensor([16, 12, 16,  3, 14,  9,  3, 14, 14,  9,  3,  9,  2,  3, 16, 14, 16, 13,
         9,  1, 18,  5, 12, 15, 21,  6,  6, 16,  8,  0,  8, 16])}, {'prot_tokens': tensor([ 1,  6, 11,  5, 18,  4,  5,  0, 21, 12,  6, 18,  1,  6,  9, 17,  0, 18,
         8, 19, 11, 11, 13, 19, 19, 23,  0, 14, 22, 16, 22,  8])}, {'prot_tokens': tensor([ 6,  4,  7, 11,  3, 11, 14, 17,  1, 16, 13, 23, 13, 11,  6, 17, 15,  4,
        14, 21,  1, 16,  6,  5,  0, 16, 16, 17, 10, 21,  5, 16])}, {'prot_tokens': tensor([18,  7, 11, 16,  3, 17, 15,  6, 14, 15,  3, 16, 10,  1, 17,  2,  6,  3,
        17,  6,  4, 21, 13,  9, 16,  4,  9, 11,  6,  5, 23,  0])}, {'prot_tokens': tensor([ 5,  2, 11, 22,  6,  0, 13,  4,  2, 10, 14,  9,  2,  5, 12, 11, 17,  6,
        20,  8, 10, 21,  5, 18,  2, 15, 12, 19, 16, 12,  4, 12])}, {'prot_tokens': tensor([ 5, 17,  8, 15, 18,  1,  6, 18, 20, 11, 16,  3,  8, 19, 17, 23, 14, 21,
         2,  9, 21, 21, 11, 10,  1, 23,  1, 12, 16, 17, 23,  4])}, {'prot_tokens': tensor([15, 23, 14, 12,  6, 15,  6,  1, 12, 19,  5, 19, 21,  3, 10, 20, 21, 22,
        23, 10, 15,  2,  3, 21,  1, 20, 20,  2,  1,  7,  9, 18])}, {'prot_tokens': tensor([16, 11, 19,  9, 16, 11,  8,  0,  5,  0,  7,  2,  3,  6, 15, 12, 12,  1,
         8, 13, 13,  4, 21, 16,  8, 16, 11, 21, 10,  8,  9,  1])}, {'prot_tokens': tensor([10,  2,  1,  6, 13, 21, 13,  9,  5, 18,  0,  0,  7, 14, 12, 19,  2,  8,
        13, 18,  2, 12,  9,  6,  8, 13,  6, 19, 12, 14, 23, 17])}, {'prot_tokens': tensor([12, 23,  2, 16, 14, 22, 11, 13,  3,  5, 16, 15, 15, 19, 17, 14, 20,  7,
         8, 16,  1,  5,  3,  6, 14,  9,  5,  3, 17, 18, 10,  7])}, {'prot_tokens': tensor([ 5,  8,  1,  3, 16,  9,  2, 11, 23, 20,  4, 11, 12,  2, 17, 13, 16, 19,
        20, 15, 21, 20,  7,  9, 15,  3, 15,  4, 18, 10, 16, 21])}, {'prot_tokens': tensor([ 7, 15, 20, 15, 23,  9, 22,  4, 18,  3, 10,  3, 17, 15, 20, 22,  6, 13,
        11, 10,  9,  1, 10,  5,  0, 17, 23,  5,  6,  5, 13, 11])}, {'prot_tokens': tensor([ 7, 22, 22,  9,  5,  6,  1, 10, 19,  8,  4, 23, 16, 12, 12, 21, 18,  9,
        20,  4,  6, 19,  4, 14, 15,  5, 15, 20,  2, 20,  4,  3])}, {'prot_tokens': tensor([ 2, 17, 23, 11, 13,  9,  1, 19,  5, 13, 23, 10,  3, 11,  5,  8, 16,  2,
         4,  4, 14,  8, 10,  2, 11,  2, 11,  5,  5, 16,  1,  5])}, {'prot_tokens': tensor([16,  3,  6,  1,  1,  9, 14,  3, 16, 23,  8,  3, 14, 13, 12, 16, 23,  3,
        18, 12, 11, 21, 15,  1,  3,  0,  4, 21, 11, 17,  8,  3])}, {'prot_tokens': tensor([21, 12, 14,  9, 13, 10, 13,  4, 16,  0, 18, 14, 14,  2,  8,  0, 19,  6,
         3,  5,  3,  3, 16,  0, 13,  2,  6, 19,  7,  4,  0, 12])}, {'prot_tokens': tensor([ 4, 20, 15, 15,  2, 12,  7,  9,  0,  0, 22, 21, 11, 17,  1, 10, 11,  8,
        14,  2,  2, 17, 20, 17,  7,  9,  8, 18, 13,  1, 17,  5])}, {'prot_tokens': tensor([ 1, 18,  7, 16,  1, 17, 17, 18, 10, 12, 19, 14,  6, 16,  2, 22, 12, 13,
        20,  2, 15,  5, 20,  2, 12,  1, 15, 16, 13,  5, 12, 10])}, {'prot_tokens': tensor([18, 17,  2, 17, 13, 11,  8, 22, 17,  9, 15, 14, 15,  3,  2, 22,  6, 11,
         9,  8,  2,  6, 23,  9, 12, 13, 15, 14, 18, 10,  5,  7])}, {'prot_tokens': tensor([ 3,  9,  3, 22, 21,  2, 20, 17, 17, 14, 17, 10, 17,  7,  9,  5,  4, 21,
         2,  1, 22,  2,  3,  3,  5, 17, 13,  3,  1, 23, 13,  6])}, {'prot_tokens': tensor([12, 16,  8,  7,  0, 12, 14, 20, 16,  5,  7,  2, 17,  3,  4,  0, 15, 11,
         4,  6, 18, 13,  3, 14, 15,  3, 13, 23, 20, 23, 18, 10])}, {'prot_tokens': tensor([11, 16, 16,  1, 17,  0,  8,  4,  9, 17, 11,  4, 23, 10, 11,  2, 20, 10,
        11,  6, 11,  2, 14,  1, 15, 20,  7, 15, 14, 18, 23, 20])}, {'prot_tokens': tensor([20, 14, 17,  2, 23,  7,  3, 22, 15, 10, 15, 21, 19, 11,  8,  1, 21, 13,
         8, 17,  4, 22,  5,  4, 20,  7, 15, 23, 20,  2, 13,  1])}, {'prot_tokens': tensor([17, 15, 17,  7, 18, 22, 23, 13,  1,  7, 20, 10,  9, 23, 21, 19, 11, 10,
        16, 10,  3,  9, 20,  7, 10,  7, 12,  4, 23,  5,  5,  7])}, {'prot_tokens': tensor([ 4,  9, 21, 16, 13,  2, 21, 22,  3, 23,  1,  2, 16, 22,  4, 18, 21, 13,
        21, 14,  8, 10, 21, 16, 17, 12, 12,  9,  4,  3, 21, 16])}, {'prot_tokens': tensor([13, 14, 12,  9, 14, 21,  0,  4, 10,  6, 12,  1, 14, 20, 14,  7, 12,  7,
        16, 13, 18, 14, 11,  7, 11,  6, 21, 21, 12,  3, 17,  2])}, {'prot_tokens': tensor([15,  7, 10, 14,  0, 22, 17,  0,  4, 21, 15,  8,  0,  6, 18, 13,  6,  3,
        18,  3,  9,  1,  4, 12,  0, 15, 21,  5, 21, 13, 14, 14])}, {'prot_tokens': tensor([ 7, 11, 14, 21, 23,  0,  8, 19,  0, 21, 15, 21, 19, 20, 22,  7, 21, 22,
         7,  3,  6,  4, 19, 16, 16,  1, 11,  9, 13, 13, 19,  7])}, {'prot_tokens': tensor([ 5,  9, 12,  7,  6, 16, 23,  0,  1,  0,  3,  8, 11, 22,  7, 19, 18, 12,
         5, 18, 21, 20, 10, 23,  1,  7, 20,  3, 15,  3, 16, 22])}, {'prot_tokens': tensor([16, 15, 22,  2, 14,  1, 11, 13, 20, 14, 22,  3, 16, 13, 16, 10,  8,  9,
        15, 22, 18,  5, 14, 23, 15, 10, 23,  7, 19, 17, 18,  6])}, {'prot_tokens': tensor([ 5,  9, 11,  7,  6, 16,  7,  7,  3,  5,  1,  8,  4, 21, 20, 18,  9,  8,
         9, 22, 22, 17, 19,  0, 13,  3, 10,  3, 11,  0, 12, 18])}, {'prot_tokens': tensor([ 1,  1,  3,  4,  8,  2, 16, 16, 10, 14,  7, 13,  9, 19,  0,  9,  1, 18,
         6,  2,  7,  2,  6,  6,  2, 14,  0, 22, 13,  3, 21, 20])}, {'prot_tokens': tensor([ 6, 19, 21, 17, 18, 15,  9, 22, 14,  4, 13, 11, 13, 23, 17, 19,  2,  0,
        10, 23, 22, 18, 19,  3,  6, 16, 11,  9, 22,  3,  6, 23])}, {'prot_tokens': tensor([21,  2, 19,  1, 10,  5, 18, 14,  6, 21, 23, 13, 13,  1,  6, 10,  2, 17,
        14, 17,  8,  2, 22, 19,  2, 15, 18,  7,  1,  9, 23, 13])}, {'prot_tokens': tensor([13, 12, 17,  5, 21,  0,  5,  3, 19, 12, 10, 13,  7,  9, 13,  3, 10, 23,
         4,  1,  3, 22, 14, 18, 19,  5, 16,  2, 16,  8, 11, 17])}]
Trainer initialized. Device: cpu
self.rank=0
self.device=device(type='cpu')
Config loaded from: /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmpvqsdn5ea/test_config.yaml
📝 File logging enabled: /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmpvqsdn5ea/logs/training_20250926_202433.log
✅ CPU training without mixed precision
🧬 Sampling method configured: rigorous
📊 Using CTMC sampling with 50 steps
🔧 Predictor: {getattr(self.cfg.sampling, 'predictor', 'euler')} 
🎯 Noise removal: {getattr(self.cfg.sampling, 'noise_removal', True)}
   🧪 Quick generation tests every 40 steps
Starting training...
Setting up data loaders...
Loading custom dataset: /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmpvqsdn5ea/dummy_data.pt sans ddp
📁 Loading file (0.0GB) into memory...
Loaded 100 pre-tokenized sequences from /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmpvqsdn5ea/dummy_data.pt
Train dataset: 95 samples
Val dataset: 5 samples
Batch size: 4
Train batches: 23
Val batches: 2
Data loaders ready.
Setting up model...
✅ Using V100-compatible SEDD model (no flash attention required)
⚠️  Gradient checkpointing not supported by V100 model
Model ready. Parameters: 19,856,384
Setting up optimizer...
📊 Single GPU Learning Rate: 2.00e-05
✅ Using CPU without mixed precision
✅ Scheduler configured with scaled LR: max=2.00e-05, warmup_steps=2500
Optimizer ready.
✅ Using model without DDP wrapper
📝 Wandb disabled - using file logging instead
🆕 No existing checkpoint found. Starting training from scratch...
🚀 Starting training for 25000 steps (from step 0)...

🧪 Running initial generation test to verify setup...

🧬 Quick generation test - Step 0 (max_length: 32)
🧬 Generating 2 protein sequences using rigorous CTMC sampling...
Flash attention rotary failed (Pointer argument (at 0) cannot be accessed from Triton (cpu tensor?)), using native implementation
⚠️  Error in rigorous sampling: The size of tensor a (64) must match the size of tensor b (32) at non-singleton dimension 4
🔄 Falling back to simple generation method...
🧬 Generating 2 protein sequences using simple heuristic sampling...
⚠️  Error generating sample 0: index out of range in self
⚠️  Error generating sample 1: index out of range in self
   ⚠️  No valid sequences generated (2 attempted)
⚠️  Initial generation test had issues - but continuing training
🔄 Training for 5 epochs (override: None, config: 5)
📊 Probabilistic curriculum: step=0, progress=0.00, avg_t=0.249, low_noise%=50.0, high_noise%=0.0
Flash attention rotary failed (Pointer argument (at 0) cannot be accessed from Triton (cpu tensor?)), using native implementation
FAILED
tests/test_checkpoint_resume.py::TestCheckpointResume::test_checkpoint_resume [{'prot_tokens': tensor([22, 21,  7, 17, 23,  5, 19,  6, 14, 17,  8, 16,  3, 10, 11, 22, 21,  9,
        18, 12,  4, 17,  4, 19, 23, 16,  0, 13, 10,  5,  9, 19])}, {'prot_tokens': tensor([16, 23, 21,  8,  4, 14,  8, 18, 19, 23, 12, 13,  3,  4,  3, 17,  6,  7,
        19, 23, 20, 20, 15, 23, 13, 23, 22,  4, 10, 12,  1, 17])}, {'prot_tokens': tensor([11,  2,  2,  2, 15,  6, 21, 19, 23, 21, 11, 16,  4,  6, 19, 15, 15, 20,
        13, 14, 19,  7, 10, 18,  8, 22, 10,  6,  4, 21,  9, 23])}, {'prot_tokens': tensor([16, 16,  9,  9,  9,  4,  7,  5, 10,  7, 23, 20, 15, 20,  7,  4, 17,  5,
        16,  4,  4,  1, 14, 19, 16, 21,  9, 23,  2,  5,  6,  5])}, {'prot_tokens': tensor([14,  8,  8, 15, 11,  5, 14, 14, 14,  9,  5, 20, 16, 17,  5,  6, 18,  0,
         4,  0,  5, 12, 19,  8, 18, 14,  9, 18, 14, 21, 18,  5])}, {'prot_tokens': tensor([18, 14,  9, 23, 23,  7, 22, 18, 16,  6,  7,  5, 19, 11, 12, 19, 22, 16,
        17, 14, 10,  7, 13,  4, 11, 19,  5,  3, 15,  8, 18,  9])}, {'prot_tokens': tensor([ 6,  8,  2, 16,  5, 17, 20, 23,  9, 18, 19,  3,  4,  6,  2, 13, 12, 23,
         6, 11,  2,  2,  2, 16, 21, 17, 21, 23, 13, 19,  1, 22])}, {'prot_tokens': tensor([15, 14,  3, 23, 21,  0,  6, 16,  6, 21, 16, 19, 14,  3,  8,  7, 15, 11,
         3,  9,  9, 16,  4,  1,  1, 17, 13,  4, 21,  8, 13,  2])}, {'prot_tokens': tensor([ 2,  2,  1,  8, 23, 12, 18, 16,  6,  3, 22, 21, 10,  7, 18, 10, 10, 13,
        21, 18, 22, 11, 19,  5, 18, 17, 23,  6,  0,  8,  8,  0])}, {'prot_tokens': tensor([ 5,  7,  3, 18, 15, 10, 17,  1, 20, 13, 23, 21, 16,  3, 12,  9,  0, 23,
         6, 20,  9, 23,  3,  7,  4, 18, 16, 23, 15,  5,  8, 21])}, {'prot_tokens': tensor([ 7,  4, 13, 22, 16,  4,  4, 13,  0, 20, 14, 14,  6, 16, 17,  7,  0,  8,
        22, 18, 11, 21,  1,  5, 21, 23, 16,  3,  8, 19,  1, 17])}, {'prot_tokens': tensor([ 2, 20, 12, 17, 21,  9, 13, 19, 23,  5, 20,  7, 14,  2, 13, 23,  3,  9,
        15,  4, 17, 20, 21, 23,  5,  0,  9, 23,  2, 11, 22, 23])}, {'prot_tokens': tensor([ 3, 14,  1, 21,  8,  5, 14,  2,  3, 20, 19, 20, 17, 18, 18, 10, 20,  9,
         9,  7, 13, 21, 14, 15, 18,  6, 15,  3,  8, 16, 17,  4])}, {'prot_tokens': tensor([ 8, 23,  3, 13,  5,  4,  0,  6,  6,  8,  8, 18, 13, 21, 19, 12,  0,  4,
        12,  2, 18,  9,  8, 20, 18,  3, 12, 19, 22, 21, 12, 10])}, {'prot_tokens': tensor([18,  9, 23,  9, 14, 16,  5, 18, 12,  4, 22,  8,  1,  3, 12, 16,  3,  1,
        19, 22, 19,  4,  5, 23, 16, 10,  4, 15, 17, 19, 20, 12])}, {'prot_tokens': tensor([13, 15, 11,  6, 17, 23, 23, 17,  8,  6,  6, 14,  5,  1,  0,  4, 18, 21,
         8,  4,  1,  4, 16,  8, 19, 16, 23,  8,  3, 11,  2, 14])}, {'prot_tokens': tensor([17, 12,  0,  3, 12, 13, 15, 12, 16, 16, 19,  5, 15, 22, 11,  7,  7, 16,
        10, 10,  8, 12,  4, 16, 11,  2,  7, 14, 17,  4,  4, 14])}, {'prot_tokens': tensor([23, 13, 14, 20, 14, 11,  9, 12, 19,  7,  3,  7, 19,  2, 21,  2, 22, 11,
         0, 14,  5,  9,  8, 13, 17,  5,  4,  9, 19,  5,  7, 12])}, {'prot_tokens': tensor([ 4,  0, 10, 17,  7,  8,  2, 22, 21, 21, 14, 14, 12, 14,  0,  6,  7,  0,
         9, 12,  9, 20,  9, 21, 10,  3, 10, 20,  3, 12,  7,  8])}, {'prot_tokens': tensor([15,  4,  8,  5, 21,  8, 23, 10,  4, 21, 17,  0,  9,  8, 15, 11,  5, 15,
        19,  1,  9, 16, 20, 12, 13, 19, 14, 14, 13,  9, 19, 22])}, {'prot_tokens': tensor([ 6, 12, 22, 20, 11, 18,  2, 14,  5, 10,  3,  9, 20, 18,  2, 17, 15, 15,
         4, 15, 21, 19,  4,  1, 22,  8, 12, 18, 22, 14, 21,  0])}, {'prot_tokens': tensor([12, 21,  4, 23, 19,  8,  8, 13, 20,  5,  2,  0, 17, 14,  6,  6, 10,  8,
         9, 17, 23, 18,  7, 20,  1, 15,  2, 18,  7, 20,  3,  7])}, {'prot_tokens': tensor([ 8,  2,  5, 15,  2, 19, 12,  6, 10, 17,  8, 12,  5,  2, 23, 19,  9, 12,
         8,  8, 17, 20,  3,  9, 15, 14,  4, 19,  9,  4, 11, 13])}, {'prot_tokens': tensor([14,  9, 14,  6, 18, 21,  9, 16,  4,  5,  4, 18,  2,  6,  4, 15,  2, 21,
        21,  1,  7, 19, 12, 11, 16,  2, 23,  0,  6, 18, 12,  2])}, {'prot_tokens': tensor([ 8, 15, 21,  0, 14,  7, 17,  5,  7, 16,  8, 14,  3, 14, 10,  9, 10, 18,
        20,  3,  2,  8, 21, 10, 14, 19,  9,  8, 21, 10, 17, 10])}, {'prot_tokens': tensor([16,  7, 13,  0,  5,  7,  1, 16, 23, 18, 19, 10, 11,  0,  9, 13, 23, 22,
         4,  7, 10, 19, 13, 22,  4, 13, 22, 18, 14, 19, 16,  8])}, {'prot_tokens': tensor([20, 20, 22,  2,  4, 18, 16, 12, 13, 19,  6, 16,  4, 15, 13, 16,  5,  9,
        10, 16,  5, 10, 11, 11, 12, 10, 10, 21,  0,  1,  1, 15])}, {'prot_tokens': tensor([16, 11,  6,  6, 12, 14, 23, 17, 17, 20,  1, 14, 22, 12, 10,  7,  3, 20,
        11,  0,  7, 15,  4, 12, 16,  0, 10, 17, 22, 18, 13,  3])}, {'prot_tokens': tensor([ 8,  8, 21, 23, 11,  6,  7, 15, 16,  8, 19,  0, 11,  3,  7,  8,  3, 10,
        19, 20, 19, 11,  8,  3, 16, 10, 16, 18, 22, 14, 12, 17])}, {'prot_tokens': tensor([23,  5,  8, 17, 23,  3, 14,  5, 11, 15, 14,  9, 21, 14, 21, 16, 12, 21,
         9,  7,  2, 23, 17, 15, 21,  6,  9, 17, 22, 16, 16, 17])}, {'prot_tokens': tensor([ 8, 10, 12, 13, 17, 11, 16,  8, 16, 19,  0, 13, 10, 16, 16, 23, 22, 13,
        12,  6,  2, 11, 20,  8, 23, 17, 13,  8,  7, 12,  3,  3])}, {'prot_tokens': tensor([18,  0,  9, 14, 20,  4,  3, 19, 19, 12,  2, 10,  0,  6,  9,  7, 21,  0,
        15, 22,  6, 13,  6, 16, 10,  8, 11, 10, 22,  4, 19, 18])}, {'prot_tokens': tensor([17, 14, 15,  2,  0,  8,  8, 13, 11, 18,  2, 20, 11, 12, 21, 10,  3,  3,
         0,  4,  0, 18, 18,  9,  2, 22,  9,  3,  2, 15, 18, 15])}, {'prot_tokens': tensor([18,  3, 18, 17, 12, 14, 15, 13, 12, 12, 15, 10,  9, 11,  4,  0,  6,  8,
        11, 23, 14,  0, 10, 13, 14, 20, 19, 20,  1, 14,  6, 13])}, {'prot_tokens': tensor([21, 21,  1,  5,  6, 18, 23, 14, 16, 14, 15,  2,  4, 17,  4, 20, 14, 10,
         2,  4, 22,  3,  1,  1,  0,  7,  2, 18, 15,  4,  6, 19])}, {'prot_tokens': tensor([19,  8,  6, 21,  5,  1, 18, 20, 19, 13,  2, 12, 13, 23, 10, 11,  5,  3,
         1, 21,  3,  8, 16, 22,  4, 21, 19, 16, 19,  2, 14, 12])}, {'prot_tokens': tensor([14, 18,  2, 13, 23, 12,  8,  6,  5,  5, 18, 16, 10,  3, 18, 13, 19,  6,
        21, 23,  1, 17,  9, 21, 20, 13, 11,  7,  0,  1,  7,  6])}, {'prot_tokens': tensor([17, 23, 15, 14, 15,  7,  8, 21, 16,  3, 15,  7, 19,  7, 11,  8, 11, 14,
        21,  7,  0,  0,  1,  5,  0, 13, 16,  6, 21,  7, 12,  2])}, {'prot_tokens': tensor([ 0, 13, 17,  8, 10,  1, 12, 11, 16, 23,  8, 10,  2,  1, 17,  3, 10, 21,
        20,  0,  9,  8,  9,  9,  2, 21,  8,  0, 18,  2, 13, 14])}, {'prot_tokens': tensor([20, 17, 11, 21,  2,  6,  5, 20,  9,  5,  8,  0,  5,  3, 14,  4, 13,  3,
         4, 18, 23, 16, 15, 23, 18, 15, 16,  1,  1,  4, 19, 13])}, {'prot_tokens': tensor([19, 16,  6,  5, 23,  4,  9,  8,  4,  4, 23, 22,  2,  8,  2,  3, 10, 19,
        22,  7, 17, 19,  2,  5, 15, 23, 10, 10, 13, 16, 18, 10])}, {'prot_tokens': tensor([16,  9, 14,  4,  8, 16,  0,  4, 10, 21,  3,  1,  6, 14,  0, 22,  2, 14,
        20, 11, 14,  7, 11, 10,  1, 13,  8, 19,  0, 22, 12, 22])}, {'prot_tokens': tensor([ 1, 15,  6,  8, 14,  9, 22, 22,  5, 14, 15,  3, 13, 17, 23, 12,  3,  9,
        18, 23, 16, 14,  2,  1,  3, 15, 11,  0,  4, 12, 13, 11])}, {'prot_tokens': tensor([13, 15, 21,  1, 14, 12, 17,  1,  2, 18, 22, 19,  3,  6,  6,  1,  4, 14,
         8,  7,  4, 12,  1, 16, 10, 18, 19, 14,  5,  5,  9, 21])}, {'prot_tokens': tensor([11,  0, 16,  4,  4, 23,  9, 11, 21, 10, 19, 22, 21, 22, 19, 12,  0,  0,
         6,  9, 11, 21,  9, 19, 20,  6, 22,  0, 22,  1,  4,  0])}, {'prot_tokens': tensor([ 8, 20,  5, 10, 18,  7, 17,  0, 19,  9, 18, 12, 12, 10,  1,  0, 10,  5,
         1,  5, 23,  6, 19,  3, 21, 12, 17, 20, 13, 16, 17,  7])}, {'prot_tokens': tensor([ 6, 13, 20, 19,  0,  2,  7,  3,  5, 12, 21, 18,  7, 15,  6, 21,  9,  8,
        15, 15, 20,  4, 23,  2, 23, 11,  5,  6, 13, 13,  5, 11])}, {'prot_tokens': tensor([ 5, 10, 22,  3,  1, 15, 18, 16, 22, 21,  3, 20,  0, 17, 14,  7, 19,  5,
         0,  8,  9, 19, 21, 11,  1, 17, 11,  3, 22,  2, 20,  3])}, {'prot_tokens': tensor([19, 14,  7, 17,  1, 20,  5,  1, 12,  0, 20,  8, 13,  7,  0, 18,  8,  3,
        17,  2, 16, 12, 13, 13,  7, 22, 11,  4, 23, 21, 15, 11])}, {'prot_tokens': tensor([18,  2,  7, 16, 20,  2, 21, 19,  9, 10, 15, 15,  4, 15, 16, 15, 10, 15,
         0,  5,  4, 11,  5,  6, 12,  9,  0,  5,  0, 15,  3,  9])}, {'prot_tokens': tensor([ 5,  0, 14, 15,  7, 16,  8,  1, 15, 21,  5, 12,  7,  0, 21, 14, 13, 15,
         5,  2, 10, 16,  7, 20,  3,  0, 19, 15, 16, 11, 12,  3])}, {'prot_tokens': tensor([ 2,  1,  0, 19, 11, 11, 16, 16,  8, 10, 19, 19,  5, 22, 19, 20, 14,  5,
        23,  3, 21,  6, 16,  5, 14, 23,  6,  6, 12, 20, 23, 21])}, {'prot_tokens': tensor([ 3,  9, 18, 18, 23, 13,  5, 19,  5,  3,  2,  9, 19, 13, 13, 17,  2,  5,
         2,  4,  5, 17,  2,  0,  0,  1, 12,  4, 13, 19,  6,  5])}, {'prot_tokens': tensor([10, 18,  7, 20, 18,  1, 11, 21, 14, 19,  6,  8,  8, 21,  7,  4, 21, 17,
         1, 23, 22,  9,  0,  8, 19,  3,  7,  7,  2, 18, 14,  7])}, {'prot_tokens': tensor([ 2,  7,  8, 23,  6,  2,  9, 22, 21,  3, 17, 23, 18,  8,  7, 10,  5, 17,
        23,  8,  1, 22, 17, 10, 23,  9, 15,  0, 22, 19,  8,  1])}, {'prot_tokens': tensor([ 9, 13, 13, 10,  6,  7,  6, 13, 20, 21,  4, 14,  9, 11,  9, 20, 23,  9,
        16, 15, 14,  6, 22, 11, 10,  5, 21, 13, 18, 22,  4, 12])}, {'prot_tokens': tensor([ 4, 22,  3,  7, 23,  5,  9, 19, 22, 11, 23,  7,  8, 18,  8,  3, 22, 13,
        21,  7,  0,  2,  2,  6, 23,  8, 11, 19, 23,  4,  1,  0])}, {'prot_tokens': tensor([11, 15,  3,  2, 14, 12, 22,  3,  9, 14,  6,  9, 12,  6, 13, 15,  0, 16,
         1,  3, 10,  8,  4,  3, 23, 17, 20, 20, 17,  7, 22, 18])}, {'prot_tokens': tensor([ 8,  2, 10,  1, 13,  7, 19,  0, 18,  1, 22,  5, 22,  1,  1, 21, 20, 23,
         3,  6, 14, 10, 23, 19, 18, 14, 15, 13, 14, 23, 22, 23])}, {'prot_tokens': tensor([ 2,  8, 22, 17,  7, 17,  0, 23, 10, 10,  8, 15, 12,  0,  4, 16,  4,  2,
         0, 21,  5,  1, 11,  6, 13, 22, 23,  2,  9, 11,  7,  7])}, {'prot_tokens': tensor([18, 19, 20,  4,  1, 20,  9,  5,  5, 21, 23,  9, 15, 11, 13, 12, 16,  8,
        14, 16, 14,  5, 17,  8, 12,  0, 22, 10,  3, 21,  4,  9])}, {'prot_tokens': tensor([10,  7, 10, 19,  7, 15,  7, 18, 12, 22,  1, 17, 11, 18, 17,  9,  3, 17,
        13,  8, 11, 20, 21, 12,  6,  6, 11, 17, 11, 16,  2, 19])}, {'prot_tokens': tensor([20, 17,  7, 11, 14, 10, 14,  0,  4, 13, 17, 16, 22, 14,  3, 13,  8,  6,
         6, 18,  1,  3,  6, 16,  0,  2,  2, 18, 20, 10,  3, 21])}, {'prot_tokens': tensor([22,  2,  9,  8,  2, 15,  2, 15,  7,  3, 19,  6, 12, 18, 10,  6, 17, 20,
         3,  4, 16, 16,  2,  9,  2,  5, 14, 23, 17, 20,  0, 20])}, {'prot_tokens': tensor([18, 18, 13, 20, 18,  1,  1, 18, 17, 22,  0, 16, 20,  2, 14,  0, 14, 11,
         5,  7, 17, 12, 12,  6, 19, 17,  7, 20,  2, 23, 19,  9])}, {'prot_tokens': tensor([ 0, 14, 15,  8, 11,  3,  1, 17,  2, 16, 20,  6,  0,  2, 19, 13, 19,  0,
         7,  3,  0, 12, 11,  9, 10, 15,  5, 16, 12,  1, 15, 16])}, {'prot_tokens': tensor([23, 10, 11,  1, 13,  9,  9, 19, 22,  1, 23,  7,  3, 15, 12,  4, 23,  8,
        12,  0,  4, 13,  7,  5, 23, 23, 22, 17, 22, 20, 13, 13])}, {'prot_tokens': tensor([ 6,  1,  0,  4, 16, 18,  6, 22,  8,  6, 22,  7, 15,  4, 19, 14,  5, 11,
        10, 16, 10, 22, 12,  0, 18,  4, 17, 19, 20,  0, 23, 21])}, {'prot_tokens': tensor([ 5,  5,  8,  9,  3,  8,  0, 23, 17,  6,  7, 18, 15,  0,  6, 11,  5,  2,
        21, 11,  4, 19, 14, 16, 22, 17,  7, 22, 12,  4,  0, 11])}, {'prot_tokens': tensor([ 4,  7, 17,  9, 11, 18,  2,  4,  6,  3, 20,  2,  6,  6, 13,  5, 23, 17,
        13,  6,  4,  5,  0,  4,  5,  3, 19, 17,  9, 23,  8, 19])}, {'prot_tokens': tensor([16,  5,  6, 22,  9, 12, 23, 22, 15,  0,  4, 21,  8,  5, 13, 12, 23, 10,
        22,  4, 15,  8,  7, 16, 11, 16, 13, 14, 17, 21, 18, 19])}, {'prot_tokens': tensor([ 0,  0, 19,  2, 13,  5, 19,  5,  9, 23, 12,  5, 14, 19, 23, 23, 22,  9,
         5, 20, 19,  0, 21, 10, 20,  0,  9,  2, 18,  2,  9,  6])}, {'prot_tokens': tensor([ 9,  5,  6,  4, 23,  6, 15,  5, 20, 22,  6, 15,  8, 13, 14, 10,  4, 21,
         8,  0,  4, 10, 23, 15,  4, 22, 21, 21,  7, 14, 11,  7])}, {'prot_tokens': tensor([ 6,  0, 13,  7, 15, 17,  7, 16,  3, 12, 18,  1,  7,  6,  8,  1, 15, 17,
        13, 12,  6, 17, 21, 12, 15, 21,  9, 19,  7, 17,  9,  6])}, {'prot_tokens': tensor([21, 21, 14, 11,  0, 21, 11,  3,  8, 22, 18, 15,  6,  2,  4,  0, 12,  4,
        18,  1,  0, 15, 18,  9, 21, 23, 20, 19,  0,  8, 17, 12])}, {'prot_tokens': tensor([15, 20, 14,  3,  6,  1, 10, 15,  0, 14, 23, 20, 13, 16, 10, 10, 13,  5,
         3,  8, 23,  0, 17,  6,  1, 16,  6,  1,  4,  6, 19, 23])}, {'prot_tokens': tensor([22, 12, 20, 20, 11, 13, 14,  4, 19, 15, 20,  6, 10, 18, 16, 13, 20, 10,
        20, 16, 16,  5, 19, 17, 23, 22, 13, 22,  2,  4,  3, 11])}, {'prot_tokens': tensor([14,  7, 15, 19,  7, 18,  3, 19, 12,  2, 13, 15, 11,  9, 12, 20,  0,  8,
        23, 19,  4, 15, 21, 19, 23,  6,  1, 19, 20, 19,  5,  8])}, {'prot_tokens': tensor([ 7, 20,  2, 23,  6,  0, 10,  8, 11, 10, 11, 16, 23, 11, 13,  0, 17,  6,
        19, 21, 10,  1,  2, 19,  6, 10, 14, 14, 15, 12,  4,  8])}, {'prot_tokens': tensor([15, 13,  6,  6,  9, 13,  5,  7,  9,  1,  8, 19, 21, 13, 15,  8, 12, 16,
         5,  9, 20,  1, 17, 15,  8,  3, 15, 20,  5, 10, 22,  2])}, {'prot_tokens': tensor([14, 14,  8, 18, 18, 17,  0, 12, 23,  2, 12, 12,  1, 21, 20, 21, 18, 13,
         2, 16,  2, 20,  5,  1,  2,  4, 14, 12,  8,  6,  6, 12])}, {'prot_tokens': tensor([15, 11,  6,  3, 20, 17,  6, 14, 16, 23, 21, 17,  4,  2, 19, 13, 19, 15,
        12,  7, 12, 13, 21, 21, 16, 23, 21, 23, 12,  1,  3,  2])}, {'prot_tokens': tensor([18,  8, 15, 20,  4, 20, 15, 12, 21, 11, 18, 19, 13, 18, 12,  8,  0,  6,
        23, 11,  6,  3, 18,  6, 11, 19, 22,  9,  6, 12,  8, 17])}, {'prot_tokens': tensor([20, 18,  2, 13, 16, 22, 20,  1, 21, 18, 17, 10, 11, 12, 14, 16, 12, 21,
         2, 13,  8,  0,  7, 21,  2,  8,  5, 12, 18,  3, 19, 16])}, {'prot_tokens': tensor([ 0, 19,  3, 20,  6, 17, 20, 19,  2,  6, 11, 13,  8, 21, 21, 16, 18,  4,
         7,  3,  2, 23, 15,  5, 22, 15, 15, 13, 20,  1, 19,  4])}, {'prot_tokens': tensor([20, 22,  4, 23, 16, 14, 17, 15, 17, 14,  3, 14,  0, 11, 10, 14, 23,  9,
         6,  9,  3, 18,  1,  1, 12, 21, 21, 11,  5, 15, 10, 19])}, {'prot_tokens': tensor([19,  2, 14,  3,  1,  8,  9, 13, 20,  7, 13, 19, 12,  8, 20, 21,  1,  5,
         5, 20,  6, 15,  0,  9,  5,  7, 14, 18, 12, 11,  1,  2])}, {'prot_tokens': tensor([23,  5,  0, 19,  9, 23,  0, 20, 18,  0, 12,  4, 15, 10, 23,  7, 13, 13,
        12,  5,  1, 10, 19,  3, 11,  1,  5,  9, 12, 23, 18, 16])}, {'prot_tokens': tensor([ 3, 11, 17, 20, 15,  7,  7,  2, 10, 19,  9,  9, 16, 23, 21,  0, 16, 14,
        18, 16, 13, 19, 20,  9,  3,  1,  6,  1, 21,  7,  2, 12])}, {'prot_tokens': tensor([ 5, 10,  6,  3,  4, 12,  5,  3,  6, 12, 22,  8, 17, 23, 13, 19, 10,  4,
         6, 23, 12, 22,  2,  0,  7, 17, 22, 17,  8, 12, 17,  7])}, {'prot_tokens': tensor([ 8, 18,  6, 15, 12,  4,  9,  6, 13,  9, 10, 20, 15,  1, 11, 11,  8,  0,
        15, 20, 11,  7,  4,  4,  4, 10,  2, 18,  9,  3, 22, 15])}, {'prot_tokens': tensor([ 8, 14,  2, 13,  2, 20, 23, 23, 15, 23,  0, 19,  2, 16,  7, 15,  5, 17,
         6, 21,  3,  0,  8,  0, 15,  4,  0, 20, 19, 13, 16, 16])}, {'prot_tokens': tensor([17, 23,  1,  8, 13, 20,  0, 10, 21, 21, 21, 22, 18, 17,  3, 16, 19, 16,
        17, 14,  6,  3, 18,  2, 14,  6, 20,  8,  6, 18,  2, 10])}, {'prot_tokens': tensor([ 4,  4, 22, 16, 10, 18, 12,  8, 17, 14,  5, 20, 11,  6,  1,  6, 19,  7,
        14,  2, 14, 19,  1, 12, 20,  9, 21, 18, 11, 22,  8,  4])}, {'prot_tokens': tensor([ 2, 13, 17,  9, 13, 10, 10,  1, 17, 23, 11, 11,  1, 12, 23, 14,  2, 22,
        19, 15,  4, 13,  3,  4, 11, 22, 16, 13, 19, 17,  2, 13])}, {'prot_tokens': tensor([14, 23, 12, 11, 16, 21,  7,  4,  2,  9, 16,  0, 23, 13, 17,  6, 19, 21,
        22, 18, 20,  4, 16,  0, 22,  5,  9, 20,  4,  8,  0, 22])}, {'prot_tokens': tensor([ 5,  6, 15,  2, 23,  0, 23,  4,  3,  8,  1, 15,  0, 13, 22, 19,  0,  2,
        18,  0,  2, 20,  5, 18, 15,  6, 21,  9,  0, 13, 21,  0])}, {'prot_tokens': tensor([ 2, 13,  6, 17,  6, 11, 13, 22, 15, 13,  3,  3,  7, 20, 22,  8,  0, 16,
         1,  2, 12,  9, 21, 14,  0, 10, 21,  6, 13, 20, 17,  6])}, {'prot_tokens': tensor([ 2,  4, 12,  6, 20, 18, 13, 14,  5, 22,  4, 17,  2, 21, 14,  5, 15, 11,
         6, 14, 10, 18, 18,  9, 11, 16,  0, 11, 10, 16,  5, 17])}, {'prot_tokens': tensor([10, 22,  0, 19,  2,  4, 10,  4,  5, 16,  1, 16,  3, 19,  3, 10, 10,  4,
         0, 10, 20, 20,  6,  4, 20,  9, 13, 12,  8, 19,  7, 15])}]
Trainer initialized. Device: cpu
self.rank=0
self.device=device(type='cpu')
Config loaded from: /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmpjj920xpt/test_config.yaml
📝 File logging enabled: /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmpjj920xpt/logs/training_20250926_202437.log
✅ CPU training without mixed precision
🧬 Sampling method configured: rigorous
📊 Using CTMC sampling with 50 steps
🔧 Predictor: {getattr(self.cfg.sampling, 'predictor', 'euler')} 
🎯 Noise removal: {getattr(self.cfg.sampling, 'noise_removal', True)}
   🧪 Quick generation tests every 40 steps
Starting training...
Setting up data loaders...
Loading custom dataset: /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmpjj920xpt/dummy_data.pt sans ddp
📁 Loading file (0.0GB) into memory...
Loaded 100 pre-tokenized sequences from /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmpjj920xpt/dummy_data.pt
Train dataset: 95 samples
Val dataset: 5 samples
Batch size: 4
Train batches: 23
Val batches: 2
Data loaders ready.
Setting up model...
✅ Using V100-compatible SEDD model (no flash attention required)
⚠️  Gradient checkpointing not supported by V100 model
Model ready. Parameters: 19,856,384
Setting up optimizer...
📊 Single GPU Learning Rate: 2.00e-05
✅ Using CPU without mixed precision
✅ Scheduler configured with scaled LR: max=2.00e-05, warmup_steps=2500
Optimizer ready.
✅ Using model without DDP wrapper
📝 Wandb disabled - using file logging instead
🆕 No existing checkpoint found. Starting training from scratch...
🚀 Starting training for 25000 steps (from step 0)...

🧪 Running initial generation test to verify setup...

🧬 Quick generation test - Step 0 (max_length: 32)
🧬 Generating 2 protein sequences using rigorous CTMC sampling...
Flash attention rotary failed (Pointer argument (at 0) cannot be accessed from Triton (cpu tensor?)), using native implementation
⚠️  Error in rigorous sampling: The size of tensor a (64) must match the size of tensor b (32) at non-singleton dimension 4
🔄 Falling back to simple generation method...
🧬 Generating 2 protein sequences using simple heuristic sampling...
⚠️  Error generating sample 0: index out of range in self
⚠️  Error generating sample 1: index out of range in self
   ⚠️  No valid sequences generated (2 attempted)
⚠️  Initial generation test had issues - but continuing training
🔄 Training for 5 epochs (override: None, config: 5)
📊 Probabilistic curriculum: step=0, progress=0.00, avg_t=0.249, low_noise%=50.0, high_noise%=0.0
Flash attention rotary failed (Pointer argument (at 0) cannot be accessed from Triton (cpu tensor?)), using native implementation
FAILED
tests/test_checkpoint_resume.py::TestCheckpointResume::test_fresh_start_ignores_checkpoint [{'prot_tokens': tensor([22, 21,  7, 17, 23,  5, 19,  6, 14, 17,  8, 16,  3, 10, 11, 22, 21,  9,
        18, 12,  4, 17,  4, 19, 23, 16,  0, 13, 10,  5,  9, 19])}, {'prot_tokens': tensor([16, 23, 21,  8,  4, 14,  8, 18, 19, 23, 12, 13,  3,  4,  3, 17,  6,  7,
        19, 23, 20, 20, 15, 23, 13, 23, 22,  4, 10, 12,  1, 17])}, {'prot_tokens': tensor([11,  2,  2,  2, 15,  6, 21, 19, 23, 21, 11, 16,  4,  6, 19, 15, 15, 20,
        13, 14, 19,  7, 10, 18,  8, 22, 10,  6,  4, 21,  9, 23])}, {'prot_tokens': tensor([16, 16,  9,  9,  9,  4,  7,  5, 10,  7, 23, 20, 15, 20,  7,  4, 17,  5,
        16,  4,  4,  1, 14, 19, 16, 21,  9, 23,  2,  5,  6,  5])}, {'prot_tokens': tensor([14,  8,  8, 15, 11,  5, 14, 14, 14,  9,  5, 20, 16, 17,  5,  6, 18,  0,
         4,  0,  5, 12, 19,  8, 18, 14,  9, 18, 14, 21, 18,  5])}, {'prot_tokens': tensor([18, 14,  9, 23, 23,  7, 22, 18, 16,  6,  7,  5, 19, 11, 12, 19, 22, 16,
        17, 14, 10,  7, 13,  4, 11, 19,  5,  3, 15,  8, 18,  9])}, {'prot_tokens': tensor([ 6,  8,  2, 16,  5, 17, 20, 23,  9, 18, 19,  3,  4,  6,  2, 13, 12, 23,
         6, 11,  2,  2,  2, 16, 21, 17, 21, 23, 13, 19,  1, 22])}, {'prot_tokens': tensor([15, 14,  3, 23, 21,  0,  6, 16,  6, 21, 16, 19, 14,  3,  8,  7, 15, 11,
         3,  9,  9, 16,  4,  1,  1, 17, 13,  4, 21,  8, 13,  2])}, {'prot_tokens': tensor([ 2,  2,  1,  8, 23, 12, 18, 16,  6,  3, 22, 21, 10,  7, 18, 10, 10, 13,
        21, 18, 22, 11, 19,  5, 18, 17, 23,  6,  0,  8,  8,  0])}, {'prot_tokens': tensor([ 5,  7,  3, 18, 15, 10, 17,  1, 20, 13, 23, 21, 16,  3, 12,  9,  0, 23,
         6, 20,  9, 23,  3,  7,  4, 18, 16, 23, 15,  5,  8, 21])}, {'prot_tokens': tensor([ 7,  4, 13, 22, 16,  4,  4, 13,  0, 20, 14, 14,  6, 16, 17,  7,  0,  8,
        22, 18, 11, 21,  1,  5, 21, 23, 16,  3,  8, 19,  1, 17])}, {'prot_tokens': tensor([ 2, 20, 12, 17, 21,  9, 13, 19, 23,  5, 20,  7, 14,  2, 13, 23,  3,  9,
        15,  4, 17, 20, 21, 23,  5,  0,  9, 23,  2, 11, 22, 23])}, {'prot_tokens': tensor([ 3, 14,  1, 21,  8,  5, 14,  2,  3, 20, 19, 20, 17, 18, 18, 10, 20,  9,
         9,  7, 13, 21, 14, 15, 18,  6, 15,  3,  8, 16, 17,  4])}, {'prot_tokens': tensor([ 8, 23,  3, 13,  5,  4,  0,  6,  6,  8,  8, 18, 13, 21, 19, 12,  0,  4,
        12,  2, 18,  9,  8, 20, 18,  3, 12, 19, 22, 21, 12, 10])}, {'prot_tokens': tensor([18,  9, 23,  9, 14, 16,  5, 18, 12,  4, 22,  8,  1,  3, 12, 16,  3,  1,
        19, 22, 19,  4,  5, 23, 16, 10,  4, 15, 17, 19, 20, 12])}, {'prot_tokens': tensor([13, 15, 11,  6, 17, 23, 23, 17,  8,  6,  6, 14,  5,  1,  0,  4, 18, 21,
         8,  4,  1,  4, 16,  8, 19, 16, 23,  8,  3, 11,  2, 14])}, {'prot_tokens': tensor([17, 12,  0,  3, 12, 13, 15, 12, 16, 16, 19,  5, 15, 22, 11,  7,  7, 16,
        10, 10,  8, 12,  4, 16, 11,  2,  7, 14, 17,  4,  4, 14])}, {'prot_tokens': tensor([23, 13, 14, 20, 14, 11,  9, 12, 19,  7,  3,  7, 19,  2, 21,  2, 22, 11,
         0, 14,  5,  9,  8, 13, 17,  5,  4,  9, 19,  5,  7, 12])}, {'prot_tokens': tensor([ 4,  0, 10, 17,  7,  8,  2, 22, 21, 21, 14, 14, 12, 14,  0,  6,  7,  0,
         9, 12,  9, 20,  9, 21, 10,  3, 10, 20,  3, 12,  7,  8])}, {'prot_tokens': tensor([15,  4,  8,  5, 21,  8, 23, 10,  4, 21, 17,  0,  9,  8, 15, 11,  5, 15,
        19,  1,  9, 16, 20, 12, 13, 19, 14, 14, 13,  9, 19, 22])}, {'prot_tokens': tensor([ 6, 12, 22, 20, 11, 18,  2, 14,  5, 10,  3,  9, 20, 18,  2, 17, 15, 15,
         4, 15, 21, 19,  4,  1, 22,  8, 12, 18, 22, 14, 21,  0])}, {'prot_tokens': tensor([12, 21,  4, 23, 19,  8,  8, 13, 20,  5,  2,  0, 17, 14,  6,  6, 10,  8,
         9, 17, 23, 18,  7, 20,  1, 15,  2, 18,  7, 20,  3,  7])}, {'prot_tokens': tensor([ 8,  2,  5, 15,  2, 19, 12,  6, 10, 17,  8, 12,  5,  2, 23, 19,  9, 12,
         8,  8, 17, 20,  3,  9, 15, 14,  4, 19,  9,  4, 11, 13])}, {'prot_tokens': tensor([14,  9, 14,  6, 18, 21,  9, 16,  4,  5,  4, 18,  2,  6,  4, 15,  2, 21,
        21,  1,  7, 19, 12, 11, 16,  2, 23,  0,  6, 18, 12,  2])}, {'prot_tokens': tensor([ 8, 15, 21,  0, 14,  7, 17,  5,  7, 16,  8, 14,  3, 14, 10,  9, 10, 18,
        20,  3,  2,  8, 21, 10, 14, 19,  9,  8, 21, 10, 17, 10])}, {'prot_tokens': tensor([16,  7, 13,  0,  5,  7,  1, 16, 23, 18, 19, 10, 11,  0,  9, 13, 23, 22,
         4,  7, 10, 19, 13, 22,  4, 13, 22, 18, 14, 19, 16,  8])}, {'prot_tokens': tensor([20, 20, 22,  2,  4, 18, 16, 12, 13, 19,  6, 16,  4, 15, 13, 16,  5,  9,
        10, 16,  5, 10, 11, 11, 12, 10, 10, 21,  0,  1,  1, 15])}, {'prot_tokens': tensor([16, 11,  6,  6, 12, 14, 23, 17, 17, 20,  1, 14, 22, 12, 10,  7,  3, 20,
        11,  0,  7, 15,  4, 12, 16,  0, 10, 17, 22, 18, 13,  3])}, {'prot_tokens': tensor([ 8,  8, 21, 23, 11,  6,  7, 15, 16,  8, 19,  0, 11,  3,  7,  8,  3, 10,
        19, 20, 19, 11,  8,  3, 16, 10, 16, 18, 22, 14, 12, 17])}, {'prot_tokens': tensor([23,  5,  8, 17, 23,  3, 14,  5, 11, 15, 14,  9, 21, 14, 21, 16, 12, 21,
         9,  7,  2, 23, 17, 15, 21,  6,  9, 17, 22, 16, 16, 17])}, {'prot_tokens': tensor([ 8, 10, 12, 13, 17, 11, 16,  8, 16, 19,  0, 13, 10, 16, 16, 23, 22, 13,
        12,  6,  2, 11, 20,  8, 23, 17, 13,  8,  7, 12,  3,  3])}, {'prot_tokens': tensor([18,  0,  9, 14, 20,  4,  3, 19, 19, 12,  2, 10,  0,  6,  9,  7, 21,  0,
        15, 22,  6, 13,  6, 16, 10,  8, 11, 10, 22,  4, 19, 18])}, {'prot_tokens': tensor([17, 14, 15,  2,  0,  8,  8, 13, 11, 18,  2, 20, 11, 12, 21, 10,  3,  3,
         0,  4,  0, 18, 18,  9,  2, 22,  9,  3,  2, 15, 18, 15])}, {'prot_tokens': tensor([18,  3, 18, 17, 12, 14, 15, 13, 12, 12, 15, 10,  9, 11,  4,  0,  6,  8,
        11, 23, 14,  0, 10, 13, 14, 20, 19, 20,  1, 14,  6, 13])}, {'prot_tokens': tensor([21, 21,  1,  5,  6, 18, 23, 14, 16, 14, 15,  2,  4, 17,  4, 20, 14, 10,
         2,  4, 22,  3,  1,  1,  0,  7,  2, 18, 15,  4,  6, 19])}, {'prot_tokens': tensor([19,  8,  6, 21,  5,  1, 18, 20, 19, 13,  2, 12, 13, 23, 10, 11,  5,  3,
         1, 21,  3,  8, 16, 22,  4, 21, 19, 16, 19,  2, 14, 12])}, {'prot_tokens': tensor([14, 18,  2, 13, 23, 12,  8,  6,  5,  5, 18, 16, 10,  3, 18, 13, 19,  6,
        21, 23,  1, 17,  9, 21, 20, 13, 11,  7,  0,  1,  7,  6])}, {'prot_tokens': tensor([17, 23, 15, 14, 15,  7,  8, 21, 16,  3, 15,  7, 19,  7, 11,  8, 11, 14,
        21,  7,  0,  0,  1,  5,  0, 13, 16,  6, 21,  7, 12,  2])}, {'prot_tokens': tensor([ 0, 13, 17,  8, 10,  1, 12, 11, 16, 23,  8, 10,  2,  1, 17,  3, 10, 21,
        20,  0,  9,  8,  9,  9,  2, 21,  8,  0, 18,  2, 13, 14])}, {'prot_tokens': tensor([20, 17, 11, 21,  2,  6,  5, 20,  9,  5,  8,  0,  5,  3, 14,  4, 13,  3,
         4, 18, 23, 16, 15, 23, 18, 15, 16,  1,  1,  4, 19, 13])}, {'prot_tokens': tensor([19, 16,  6,  5, 23,  4,  9,  8,  4,  4, 23, 22,  2,  8,  2,  3, 10, 19,
        22,  7, 17, 19,  2,  5, 15, 23, 10, 10, 13, 16, 18, 10])}, {'prot_tokens': tensor([16,  9, 14,  4,  8, 16,  0,  4, 10, 21,  3,  1,  6, 14,  0, 22,  2, 14,
        20, 11, 14,  7, 11, 10,  1, 13,  8, 19,  0, 22, 12, 22])}, {'prot_tokens': tensor([ 1, 15,  6,  8, 14,  9, 22, 22,  5, 14, 15,  3, 13, 17, 23, 12,  3,  9,
        18, 23, 16, 14,  2,  1,  3, 15, 11,  0,  4, 12, 13, 11])}, {'prot_tokens': tensor([13, 15, 21,  1, 14, 12, 17,  1,  2, 18, 22, 19,  3,  6,  6,  1,  4, 14,
         8,  7,  4, 12,  1, 16, 10, 18, 19, 14,  5,  5,  9, 21])}, {'prot_tokens': tensor([11,  0, 16,  4,  4, 23,  9, 11, 21, 10, 19, 22, 21, 22, 19, 12,  0,  0,
         6,  9, 11, 21,  9, 19, 20,  6, 22,  0, 22,  1,  4,  0])}, {'prot_tokens': tensor([ 8, 20,  5, 10, 18,  7, 17,  0, 19,  9, 18, 12, 12, 10,  1,  0, 10,  5,
         1,  5, 23,  6, 19,  3, 21, 12, 17, 20, 13, 16, 17,  7])}, {'prot_tokens': tensor([ 6, 13, 20, 19,  0,  2,  7,  3,  5, 12, 21, 18,  7, 15,  6, 21,  9,  8,
        15, 15, 20,  4, 23,  2, 23, 11,  5,  6, 13, 13,  5, 11])}, {'prot_tokens': tensor([ 5, 10, 22,  3,  1, 15, 18, 16, 22, 21,  3, 20,  0, 17, 14,  7, 19,  5,
         0,  8,  9, 19, 21, 11,  1, 17, 11,  3, 22,  2, 20,  3])}, {'prot_tokens': tensor([19, 14,  7, 17,  1, 20,  5,  1, 12,  0, 20,  8, 13,  7,  0, 18,  8,  3,
        17,  2, 16, 12, 13, 13,  7, 22, 11,  4, 23, 21, 15, 11])}, {'prot_tokens': tensor([18,  2,  7, 16, 20,  2, 21, 19,  9, 10, 15, 15,  4, 15, 16, 15, 10, 15,
         0,  5,  4, 11,  5,  6, 12,  9,  0,  5,  0, 15,  3,  9])}, {'prot_tokens': tensor([ 5,  0, 14, 15,  7, 16,  8,  1, 15, 21,  5, 12,  7,  0, 21, 14, 13, 15,
         5,  2, 10, 16,  7, 20,  3,  0, 19, 15, 16, 11, 12,  3])}, {'prot_tokens': tensor([ 2,  1,  0, 19, 11, 11, 16, 16,  8, 10, 19, 19,  5, 22, 19, 20, 14,  5,
        23,  3, 21,  6, 16,  5, 14, 23,  6,  6, 12, 20, 23, 21])}, {'prot_tokens': tensor([ 3,  9, 18, 18, 23, 13,  5, 19,  5,  3,  2,  9, 19, 13, 13, 17,  2,  5,
         2,  4,  5, 17,  2,  0,  0,  1, 12,  4, 13, 19,  6,  5])}, {'prot_tokens': tensor([10, 18,  7, 20, 18,  1, 11, 21, 14, 19,  6,  8,  8, 21,  7,  4, 21, 17,
         1, 23, 22,  9,  0,  8, 19,  3,  7,  7,  2, 18, 14,  7])}, {'prot_tokens': tensor([ 2,  7,  8, 23,  6,  2,  9, 22, 21,  3, 17, 23, 18,  8,  7, 10,  5, 17,
        23,  8,  1, 22, 17, 10, 23,  9, 15,  0, 22, 19,  8,  1])}, {'prot_tokens': tensor([ 9, 13, 13, 10,  6,  7,  6, 13, 20, 21,  4, 14,  9, 11,  9, 20, 23,  9,
        16, 15, 14,  6, 22, 11, 10,  5, 21, 13, 18, 22,  4, 12])}, {'prot_tokens': tensor([ 4, 22,  3,  7, 23,  5,  9, 19, 22, 11, 23,  7,  8, 18,  8,  3, 22, 13,
        21,  7,  0,  2,  2,  6, 23,  8, 11, 19, 23,  4,  1,  0])}, {'prot_tokens': tensor([11, 15,  3,  2, 14, 12, 22,  3,  9, 14,  6,  9, 12,  6, 13, 15,  0, 16,
         1,  3, 10,  8,  4,  3, 23, 17, 20, 20, 17,  7, 22, 18])}, {'prot_tokens': tensor([ 8,  2, 10,  1, 13,  7, 19,  0, 18,  1, 22,  5, 22,  1,  1, 21, 20, 23,
         3,  6, 14, 10, 23, 19, 18, 14, 15, 13, 14, 23, 22, 23])}, {'prot_tokens': tensor([ 2,  8, 22, 17,  7, 17,  0, 23, 10, 10,  8, 15, 12,  0,  4, 16,  4,  2,
         0, 21,  5,  1, 11,  6, 13, 22, 23,  2,  9, 11,  7,  7])}, {'prot_tokens': tensor([18, 19, 20,  4,  1, 20,  9,  5,  5, 21, 23,  9, 15, 11, 13, 12, 16,  8,
        14, 16, 14,  5, 17,  8, 12,  0, 22, 10,  3, 21,  4,  9])}, {'prot_tokens': tensor([10,  7, 10, 19,  7, 15,  7, 18, 12, 22,  1, 17, 11, 18, 17,  9,  3, 17,
        13,  8, 11, 20, 21, 12,  6,  6, 11, 17, 11, 16,  2, 19])}, {'prot_tokens': tensor([20, 17,  7, 11, 14, 10, 14,  0,  4, 13, 17, 16, 22, 14,  3, 13,  8,  6,
         6, 18,  1,  3,  6, 16,  0,  2,  2, 18, 20, 10,  3, 21])}, {'prot_tokens': tensor([22,  2,  9,  8,  2, 15,  2, 15,  7,  3, 19,  6, 12, 18, 10,  6, 17, 20,
         3,  4, 16, 16,  2,  9,  2,  5, 14, 23, 17, 20,  0, 20])}, {'prot_tokens': tensor([18, 18, 13, 20, 18,  1,  1, 18, 17, 22,  0, 16, 20,  2, 14,  0, 14, 11,
         5,  7, 17, 12, 12,  6, 19, 17,  7, 20,  2, 23, 19,  9])}, {'prot_tokens': tensor([ 0, 14, 15,  8, 11,  3,  1, 17,  2, 16, 20,  6,  0,  2, 19, 13, 19,  0,
         7,  3,  0, 12, 11,  9, 10, 15,  5, 16, 12,  1, 15, 16])}, {'prot_tokens': tensor([23, 10, 11,  1, 13,  9,  9, 19, 22,  1, 23,  7,  3, 15, 12,  4, 23,  8,
        12,  0,  4, 13,  7,  5, 23, 23, 22, 17, 22, 20, 13, 13])}, {'prot_tokens': tensor([ 6,  1,  0,  4, 16, 18,  6, 22,  8,  6, 22,  7, 15,  4, 19, 14,  5, 11,
        10, 16, 10, 22, 12,  0, 18,  4, 17, 19, 20,  0, 23, 21])}, {'prot_tokens': tensor([ 5,  5,  8,  9,  3,  8,  0, 23, 17,  6,  7, 18, 15,  0,  6, 11,  5,  2,
        21, 11,  4, 19, 14, 16, 22, 17,  7, 22, 12,  4,  0, 11])}, {'prot_tokens': tensor([ 4,  7, 17,  9, 11, 18,  2,  4,  6,  3, 20,  2,  6,  6, 13,  5, 23, 17,
        13,  6,  4,  5,  0,  4,  5,  3, 19, 17,  9, 23,  8, 19])}, {'prot_tokens': tensor([16,  5,  6, 22,  9, 12, 23, 22, 15,  0,  4, 21,  8,  5, 13, 12, 23, 10,
        22,  4, 15,  8,  7, 16, 11, 16, 13, 14, 17, 21, 18, 19])}, {'prot_tokens': tensor([ 0,  0, 19,  2, 13,  5, 19,  5,  9, 23, 12,  5, 14, 19, 23, 23, 22,  9,
         5, 20, 19,  0, 21, 10, 20,  0,  9,  2, 18,  2,  9,  6])}, {'prot_tokens': tensor([ 9,  5,  6,  4, 23,  6, 15,  5, 20, 22,  6, 15,  8, 13, 14, 10,  4, 21,
         8,  0,  4, 10, 23, 15,  4, 22, 21, 21,  7, 14, 11,  7])}, {'prot_tokens': tensor([ 6,  0, 13,  7, 15, 17,  7, 16,  3, 12, 18,  1,  7,  6,  8,  1, 15, 17,
        13, 12,  6, 17, 21, 12, 15, 21,  9, 19,  7, 17,  9,  6])}, {'prot_tokens': tensor([21, 21, 14, 11,  0, 21, 11,  3,  8, 22, 18, 15,  6,  2,  4,  0, 12,  4,
        18,  1,  0, 15, 18,  9, 21, 23, 20, 19,  0,  8, 17, 12])}, {'prot_tokens': tensor([15, 20, 14,  3,  6,  1, 10, 15,  0, 14, 23, 20, 13, 16, 10, 10, 13,  5,
         3,  8, 23,  0, 17,  6,  1, 16,  6,  1,  4,  6, 19, 23])}, {'prot_tokens': tensor([22, 12, 20, 20, 11, 13, 14,  4, 19, 15, 20,  6, 10, 18, 16, 13, 20, 10,
        20, 16, 16,  5, 19, 17, 23, 22, 13, 22,  2,  4,  3, 11])}, {'prot_tokens': tensor([14,  7, 15, 19,  7, 18,  3, 19, 12,  2, 13, 15, 11,  9, 12, 20,  0,  8,
        23, 19,  4, 15, 21, 19, 23,  6,  1, 19, 20, 19,  5,  8])}, {'prot_tokens': tensor([ 7, 20,  2, 23,  6,  0, 10,  8, 11, 10, 11, 16, 23, 11, 13,  0, 17,  6,
        19, 21, 10,  1,  2, 19,  6, 10, 14, 14, 15, 12,  4,  8])}, {'prot_tokens': tensor([15, 13,  6,  6,  9, 13,  5,  7,  9,  1,  8, 19, 21, 13, 15,  8, 12, 16,
         5,  9, 20,  1, 17, 15,  8,  3, 15, 20,  5, 10, 22,  2])}, {'prot_tokens': tensor([14, 14,  8, 18, 18, 17,  0, 12, 23,  2, 12, 12,  1, 21, 20, 21, 18, 13,
         2, 16,  2, 20,  5,  1,  2,  4, 14, 12,  8,  6,  6, 12])}, {'prot_tokens': tensor([15, 11,  6,  3, 20, 17,  6, 14, 16, 23, 21, 17,  4,  2, 19, 13, 19, 15,
        12,  7, 12, 13, 21, 21, 16, 23, 21, 23, 12,  1,  3,  2])}, {'prot_tokens': tensor([18,  8, 15, 20,  4, 20, 15, 12, 21, 11, 18, 19, 13, 18, 12,  8,  0,  6,
        23, 11,  6,  3, 18,  6, 11, 19, 22,  9,  6, 12,  8, 17])}, {'prot_tokens': tensor([20, 18,  2, 13, 16, 22, 20,  1, 21, 18, 17, 10, 11, 12, 14, 16, 12, 21,
         2, 13,  8,  0,  7, 21,  2,  8,  5, 12, 18,  3, 19, 16])}, {'prot_tokens': tensor([ 0, 19,  3, 20,  6, 17, 20, 19,  2,  6, 11, 13,  8, 21, 21, 16, 18,  4,
         7,  3,  2, 23, 15,  5, 22, 15, 15, 13, 20,  1, 19,  4])}, {'prot_tokens': tensor([20, 22,  4, 23, 16, 14, 17, 15, 17, 14,  3, 14,  0, 11, 10, 14, 23,  9,
         6,  9,  3, 18,  1,  1, 12, 21, 21, 11,  5, 15, 10, 19])}, {'prot_tokens': tensor([19,  2, 14,  3,  1,  8,  9, 13, 20,  7, 13, 19, 12,  8, 20, 21,  1,  5,
         5, 20,  6, 15,  0,  9,  5,  7, 14, 18, 12, 11,  1,  2])}, {'prot_tokens': tensor([23,  5,  0, 19,  9, 23,  0, 20, 18,  0, 12,  4, 15, 10, 23,  7, 13, 13,
        12,  5,  1, 10, 19,  3, 11,  1,  5,  9, 12, 23, 18, 16])}, {'prot_tokens': tensor([ 3, 11, 17, 20, 15,  7,  7,  2, 10, 19,  9,  9, 16, 23, 21,  0, 16, 14,
        18, 16, 13, 19, 20,  9,  3,  1,  6,  1, 21,  7,  2, 12])}, {'prot_tokens': tensor([ 5, 10,  6,  3,  4, 12,  5,  3,  6, 12, 22,  8, 17, 23, 13, 19, 10,  4,
         6, 23, 12, 22,  2,  0,  7, 17, 22, 17,  8, 12, 17,  7])}, {'prot_tokens': tensor([ 8, 18,  6, 15, 12,  4,  9,  6, 13,  9, 10, 20, 15,  1, 11, 11,  8,  0,
        15, 20, 11,  7,  4,  4,  4, 10,  2, 18,  9,  3, 22, 15])}, {'prot_tokens': tensor([ 8, 14,  2, 13,  2, 20, 23, 23, 15, 23,  0, 19,  2, 16,  7, 15,  5, 17,
         6, 21,  3,  0,  8,  0, 15,  4,  0, 20, 19, 13, 16, 16])}, {'prot_tokens': tensor([17, 23,  1,  8, 13, 20,  0, 10, 21, 21, 21, 22, 18, 17,  3, 16, 19, 16,
        17, 14,  6,  3, 18,  2, 14,  6, 20,  8,  6, 18,  2, 10])}, {'prot_tokens': tensor([ 4,  4, 22, 16, 10, 18, 12,  8, 17, 14,  5, 20, 11,  6,  1,  6, 19,  7,
        14,  2, 14, 19,  1, 12, 20,  9, 21, 18, 11, 22,  8,  4])}, {'prot_tokens': tensor([ 2, 13, 17,  9, 13, 10, 10,  1, 17, 23, 11, 11,  1, 12, 23, 14,  2, 22,
        19, 15,  4, 13,  3,  4, 11, 22, 16, 13, 19, 17,  2, 13])}, {'prot_tokens': tensor([14, 23, 12, 11, 16, 21,  7,  4,  2,  9, 16,  0, 23, 13, 17,  6, 19, 21,
        22, 18, 20,  4, 16,  0, 22,  5,  9, 20,  4,  8,  0, 22])}, {'prot_tokens': tensor([ 5,  6, 15,  2, 23,  0, 23,  4,  3,  8,  1, 15,  0, 13, 22, 19,  0,  2,
        18,  0,  2, 20,  5, 18, 15,  6, 21,  9,  0, 13, 21,  0])}, {'prot_tokens': tensor([ 2, 13,  6, 17,  6, 11, 13, 22, 15, 13,  3,  3,  7, 20, 22,  8,  0, 16,
         1,  2, 12,  9, 21, 14,  0, 10, 21,  6, 13, 20, 17,  6])}, {'prot_tokens': tensor([ 2,  4, 12,  6, 20, 18, 13, 14,  5, 22,  4, 17,  2, 21, 14,  5, 15, 11,
         6, 14, 10, 18, 18,  9, 11, 16,  0, 11, 10, 16,  5, 17])}, {'prot_tokens': tensor([10, 22,  0, 19,  2,  4, 10,  4,  5, 16,  1, 16,  3, 19,  3, 10, 10,  4,
         0, 10, 20, 20,  6,  4, 20,  9, 13, 12,  8, 19,  7, 15])}]
Trainer initialized. Device: cpu
self.rank=0
self.device=device(type='cpu')
Config loaded from: /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmptaym25t6/test_config.yaml
📝 File logging enabled: /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmptaym25t6/logs/training_20250926_202438.log
✅ CPU training without mixed precision
🧬 Sampling method configured: rigorous
📊 Using CTMC sampling with 50 steps
🔧 Predictor: {getattr(self.cfg.sampling, 'predictor', 'euler')} 
🎯 Noise removal: {getattr(self.cfg.sampling, 'noise_removal', True)}
   🧪 Quick generation tests every 40 steps
Starting training...
Setting up data loaders...
Loading custom dataset: /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmptaym25t6/dummy_data.pt sans ddp
📁 Loading file (0.0GB) into memory...
Loaded 100 pre-tokenized sequences from /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmptaym25t6/dummy_data.pt
Train dataset: 95 samples
Val dataset: 5 samples
Batch size: 4
Train batches: 23
Val batches: 2
Data loaders ready.
Setting up model...
✅ Using V100-compatible SEDD model (no flash attention required)
⚠️  Gradient checkpointing not supported by V100 model
Model ready. Parameters: 19,856,384
Setting up optimizer...
📊 Single GPU Learning Rate: 2.00e-05
✅ Using CPU without mixed precision
✅ Scheduler configured with scaled LR: max=2.00e-05, warmup_steps=2500
Optimizer ready.
✅ Using model without DDP wrapper
📝 Wandb disabled - using file logging instead
🆕 No existing checkpoint found. Starting training from scratch...
🚀 Starting training for 25000 steps (from step 0)...

🧪 Running initial generation test to verify setup...

🧬 Quick generation test - Step 0 (max_length: 32)
🧬 Generating 2 protein sequences using rigorous CTMC sampling...
Flash attention rotary failed (Pointer argument (at 0) cannot be accessed from Triton (cpu tensor?)), using native implementation
⚠️  Error in rigorous sampling: The size of tensor a (64) must match the size of tensor b (32) at non-singleton dimension 4
🔄 Falling back to simple generation method...
🧬 Generating 2 protein sequences using simple heuristic sampling...
⚠️  Error generating sample 0: index out of range in self
⚠️  Error generating sample 1: index out of range in self
   ⚠️  No valid sequences generated (2 attempted)
⚠️  Initial generation test had issues - but continuing training
🔄 Training for 5 epochs (override: None, config: 5)
📊 Probabilistic curriculum: step=0, progress=0.00, avg_t=0.249, low_noise%=50.0, high_noise%=0.0
Flash attention rotary failed (Pointer argument (at 0) cannot be accessed from Triton (cpu tensor?)), using native implementation
FAILED
tests/test_checkpoint_resume.py::TestCheckpointResume::test_checkpoint_with_different_config [{'prot_tokens': tensor([22, 21,  7, 17, 23,  5, 19,  6, 14, 17,  8, 16,  3, 10, 11, 22, 21,  9,
        18, 12,  4, 17,  4, 19, 23, 16,  0, 13, 10,  5,  9, 19])}, {'prot_tokens': tensor([16, 23, 21,  8,  4, 14,  8, 18, 19, 23, 12, 13,  3,  4,  3, 17,  6,  7,
        19, 23, 20, 20, 15, 23, 13, 23, 22,  4, 10, 12,  1, 17])}, {'prot_tokens': tensor([11,  2,  2,  2, 15,  6, 21, 19, 23, 21, 11, 16,  4,  6, 19, 15, 15, 20,
        13, 14, 19,  7, 10, 18,  8, 22, 10,  6,  4, 21,  9, 23])}, {'prot_tokens': tensor([16, 16,  9,  9,  9,  4,  7,  5, 10,  7, 23, 20, 15, 20,  7,  4, 17,  5,
        16,  4,  4,  1, 14, 19, 16, 21,  9, 23,  2,  5,  6,  5])}, {'prot_tokens': tensor([14,  8,  8, 15, 11,  5, 14, 14, 14,  9,  5, 20, 16, 17,  5,  6, 18,  0,
         4,  0,  5, 12, 19,  8, 18, 14,  9, 18, 14, 21, 18,  5])}, {'prot_tokens': tensor([18, 14,  9, 23, 23,  7, 22, 18, 16,  6,  7,  5, 19, 11, 12, 19, 22, 16,
        17, 14, 10,  7, 13,  4, 11, 19,  5,  3, 15,  8, 18,  9])}, {'prot_tokens': tensor([ 6,  8,  2, 16,  5, 17, 20, 23,  9, 18, 19,  3,  4,  6,  2, 13, 12, 23,
         6, 11,  2,  2,  2, 16, 21, 17, 21, 23, 13, 19,  1, 22])}, {'prot_tokens': tensor([15, 14,  3, 23, 21,  0,  6, 16,  6, 21, 16, 19, 14,  3,  8,  7, 15, 11,
         3,  9,  9, 16,  4,  1,  1, 17, 13,  4, 21,  8, 13,  2])}, {'prot_tokens': tensor([ 2,  2,  1,  8, 23, 12, 18, 16,  6,  3, 22, 21, 10,  7, 18, 10, 10, 13,
        21, 18, 22, 11, 19,  5, 18, 17, 23,  6,  0,  8,  8,  0])}, {'prot_tokens': tensor([ 5,  7,  3, 18, 15, 10, 17,  1, 20, 13, 23, 21, 16,  3, 12,  9,  0, 23,
         6, 20,  9, 23,  3,  7,  4, 18, 16, 23, 15,  5,  8, 21])}, {'prot_tokens': tensor([ 7,  4, 13, 22, 16,  4,  4, 13,  0, 20, 14, 14,  6, 16, 17,  7,  0,  8,
        22, 18, 11, 21,  1,  5, 21, 23, 16,  3,  8, 19,  1, 17])}, {'prot_tokens': tensor([ 2, 20, 12, 17, 21,  9, 13, 19, 23,  5, 20,  7, 14,  2, 13, 23,  3,  9,
        15,  4, 17, 20, 21, 23,  5,  0,  9, 23,  2, 11, 22, 23])}, {'prot_tokens': tensor([ 3, 14,  1, 21,  8,  5, 14,  2,  3, 20, 19, 20, 17, 18, 18, 10, 20,  9,
         9,  7, 13, 21, 14, 15, 18,  6, 15,  3,  8, 16, 17,  4])}, {'prot_tokens': tensor([ 8, 23,  3, 13,  5,  4,  0,  6,  6,  8,  8, 18, 13, 21, 19, 12,  0,  4,
        12,  2, 18,  9,  8, 20, 18,  3, 12, 19, 22, 21, 12, 10])}, {'prot_tokens': tensor([18,  9, 23,  9, 14, 16,  5, 18, 12,  4, 22,  8,  1,  3, 12, 16,  3,  1,
        19, 22, 19,  4,  5, 23, 16, 10,  4, 15, 17, 19, 20, 12])}, {'prot_tokens': tensor([13, 15, 11,  6, 17, 23, 23, 17,  8,  6,  6, 14,  5,  1,  0,  4, 18, 21,
         8,  4,  1,  4, 16,  8, 19, 16, 23,  8,  3, 11,  2, 14])}, {'prot_tokens': tensor([17, 12,  0,  3, 12, 13, 15, 12, 16, 16, 19,  5, 15, 22, 11,  7,  7, 16,
        10, 10,  8, 12,  4, 16, 11,  2,  7, 14, 17,  4,  4, 14])}, {'prot_tokens': tensor([23, 13, 14, 20, 14, 11,  9, 12, 19,  7,  3,  7, 19,  2, 21,  2, 22, 11,
         0, 14,  5,  9,  8, 13, 17,  5,  4,  9, 19,  5,  7, 12])}, {'prot_tokens': tensor([ 4,  0, 10, 17,  7,  8,  2, 22, 21, 21, 14, 14, 12, 14,  0,  6,  7,  0,
         9, 12,  9, 20,  9, 21, 10,  3, 10, 20,  3, 12,  7,  8])}, {'prot_tokens': tensor([15,  4,  8,  5, 21,  8, 23, 10,  4, 21, 17,  0,  9,  8, 15, 11,  5, 15,
        19,  1,  9, 16, 20, 12, 13, 19, 14, 14, 13,  9, 19, 22])}, {'prot_tokens': tensor([ 6, 12, 22, 20, 11, 18,  2, 14,  5, 10,  3,  9, 20, 18,  2, 17, 15, 15,
         4, 15, 21, 19,  4,  1, 22,  8, 12, 18, 22, 14, 21,  0])}, {'prot_tokens': tensor([12, 21,  4, 23, 19,  8,  8, 13, 20,  5,  2,  0, 17, 14,  6,  6, 10,  8,
         9, 17, 23, 18,  7, 20,  1, 15,  2, 18,  7, 20,  3,  7])}, {'prot_tokens': tensor([ 8,  2,  5, 15,  2, 19, 12,  6, 10, 17,  8, 12,  5,  2, 23, 19,  9, 12,
         8,  8, 17, 20,  3,  9, 15, 14,  4, 19,  9,  4, 11, 13])}, {'prot_tokens': tensor([14,  9, 14,  6, 18, 21,  9, 16,  4,  5,  4, 18,  2,  6,  4, 15,  2, 21,
        21,  1,  7, 19, 12, 11, 16,  2, 23,  0,  6, 18, 12,  2])}, {'prot_tokens': tensor([ 8, 15, 21,  0, 14,  7, 17,  5,  7, 16,  8, 14,  3, 14, 10,  9, 10, 18,
        20,  3,  2,  8, 21, 10, 14, 19,  9,  8, 21, 10, 17, 10])}, {'prot_tokens': tensor([16,  7, 13,  0,  5,  7,  1, 16, 23, 18, 19, 10, 11,  0,  9, 13, 23, 22,
         4,  7, 10, 19, 13, 22,  4, 13, 22, 18, 14, 19, 16,  8])}, {'prot_tokens': tensor([20, 20, 22,  2,  4, 18, 16, 12, 13, 19,  6, 16,  4, 15, 13, 16,  5,  9,
        10, 16,  5, 10, 11, 11, 12, 10, 10, 21,  0,  1,  1, 15])}, {'prot_tokens': tensor([16, 11,  6,  6, 12, 14, 23, 17, 17, 20,  1, 14, 22, 12, 10,  7,  3, 20,
        11,  0,  7, 15,  4, 12, 16,  0, 10, 17, 22, 18, 13,  3])}, {'prot_tokens': tensor([ 8,  8, 21, 23, 11,  6,  7, 15, 16,  8, 19,  0, 11,  3,  7,  8,  3, 10,
        19, 20, 19, 11,  8,  3, 16, 10, 16, 18, 22, 14, 12, 17])}, {'prot_tokens': tensor([23,  5,  8, 17, 23,  3, 14,  5, 11, 15, 14,  9, 21, 14, 21, 16, 12, 21,
         9,  7,  2, 23, 17, 15, 21,  6,  9, 17, 22, 16, 16, 17])}, {'prot_tokens': tensor([ 8, 10, 12, 13, 17, 11, 16,  8, 16, 19,  0, 13, 10, 16, 16, 23, 22, 13,
        12,  6,  2, 11, 20,  8, 23, 17, 13,  8,  7, 12,  3,  3])}, {'prot_tokens': tensor([18,  0,  9, 14, 20,  4,  3, 19, 19, 12,  2, 10,  0,  6,  9,  7, 21,  0,
        15, 22,  6, 13,  6, 16, 10,  8, 11, 10, 22,  4, 19, 18])}, {'prot_tokens': tensor([17, 14, 15,  2,  0,  8,  8, 13, 11, 18,  2, 20, 11, 12, 21, 10,  3,  3,
         0,  4,  0, 18, 18,  9,  2, 22,  9,  3,  2, 15, 18, 15])}, {'prot_tokens': tensor([18,  3, 18, 17, 12, 14, 15, 13, 12, 12, 15, 10,  9, 11,  4,  0,  6,  8,
        11, 23, 14,  0, 10, 13, 14, 20, 19, 20,  1, 14,  6, 13])}, {'prot_tokens': tensor([21, 21,  1,  5,  6, 18, 23, 14, 16, 14, 15,  2,  4, 17,  4, 20, 14, 10,
         2,  4, 22,  3,  1,  1,  0,  7,  2, 18, 15,  4,  6, 19])}, {'prot_tokens': tensor([19,  8,  6, 21,  5,  1, 18, 20, 19, 13,  2, 12, 13, 23, 10, 11,  5,  3,
         1, 21,  3,  8, 16, 22,  4, 21, 19, 16, 19,  2, 14, 12])}, {'prot_tokens': tensor([14, 18,  2, 13, 23, 12,  8,  6,  5,  5, 18, 16, 10,  3, 18, 13, 19,  6,
        21, 23,  1, 17,  9, 21, 20, 13, 11,  7,  0,  1,  7,  6])}, {'prot_tokens': tensor([17, 23, 15, 14, 15,  7,  8, 21, 16,  3, 15,  7, 19,  7, 11,  8, 11, 14,
        21,  7,  0,  0,  1,  5,  0, 13, 16,  6, 21,  7, 12,  2])}, {'prot_tokens': tensor([ 0, 13, 17,  8, 10,  1, 12, 11, 16, 23,  8, 10,  2,  1, 17,  3, 10, 21,
        20,  0,  9,  8,  9,  9,  2, 21,  8,  0, 18,  2, 13, 14])}, {'prot_tokens': tensor([20, 17, 11, 21,  2,  6,  5, 20,  9,  5,  8,  0,  5,  3, 14,  4, 13,  3,
         4, 18, 23, 16, 15, 23, 18, 15, 16,  1,  1,  4, 19, 13])}, {'prot_tokens': tensor([19, 16,  6,  5, 23,  4,  9,  8,  4,  4, 23, 22,  2,  8,  2,  3, 10, 19,
        22,  7, 17, 19,  2,  5, 15, 23, 10, 10, 13, 16, 18, 10])}, {'prot_tokens': tensor([16,  9, 14,  4,  8, 16,  0,  4, 10, 21,  3,  1,  6, 14,  0, 22,  2, 14,
        20, 11, 14,  7, 11, 10,  1, 13,  8, 19,  0, 22, 12, 22])}, {'prot_tokens': tensor([ 1, 15,  6,  8, 14,  9, 22, 22,  5, 14, 15,  3, 13, 17, 23, 12,  3,  9,
        18, 23, 16, 14,  2,  1,  3, 15, 11,  0,  4, 12, 13, 11])}, {'prot_tokens': tensor([13, 15, 21,  1, 14, 12, 17,  1,  2, 18, 22, 19,  3,  6,  6,  1,  4, 14,
         8,  7,  4, 12,  1, 16, 10, 18, 19, 14,  5,  5,  9, 21])}, {'prot_tokens': tensor([11,  0, 16,  4,  4, 23,  9, 11, 21, 10, 19, 22, 21, 22, 19, 12,  0,  0,
         6,  9, 11, 21,  9, 19, 20,  6, 22,  0, 22,  1,  4,  0])}, {'prot_tokens': tensor([ 8, 20,  5, 10, 18,  7, 17,  0, 19,  9, 18, 12, 12, 10,  1,  0, 10,  5,
         1,  5, 23,  6, 19,  3, 21, 12, 17, 20, 13, 16, 17,  7])}, {'prot_tokens': tensor([ 6, 13, 20, 19,  0,  2,  7,  3,  5, 12, 21, 18,  7, 15,  6, 21,  9,  8,
        15, 15, 20,  4, 23,  2, 23, 11,  5,  6, 13, 13,  5, 11])}, {'prot_tokens': tensor([ 5, 10, 22,  3,  1, 15, 18, 16, 22, 21,  3, 20,  0, 17, 14,  7, 19,  5,
         0,  8,  9, 19, 21, 11,  1, 17, 11,  3, 22,  2, 20,  3])}, {'prot_tokens': tensor([19, 14,  7, 17,  1, 20,  5,  1, 12,  0, 20,  8, 13,  7,  0, 18,  8,  3,
        17,  2, 16, 12, 13, 13,  7, 22, 11,  4, 23, 21, 15, 11])}, {'prot_tokens': tensor([18,  2,  7, 16, 20,  2, 21, 19,  9, 10, 15, 15,  4, 15, 16, 15, 10, 15,
         0,  5,  4, 11,  5,  6, 12,  9,  0,  5,  0, 15,  3,  9])}, {'prot_tokens': tensor([ 5,  0, 14, 15,  7, 16,  8,  1, 15, 21,  5, 12,  7,  0, 21, 14, 13, 15,
         5,  2, 10, 16,  7, 20,  3,  0, 19, 15, 16, 11, 12,  3])}, {'prot_tokens': tensor([ 2,  1,  0, 19, 11, 11, 16, 16,  8, 10, 19, 19,  5, 22, 19, 20, 14,  5,
        23,  3, 21,  6, 16,  5, 14, 23,  6,  6, 12, 20, 23, 21])}, {'prot_tokens': tensor([ 3,  9, 18, 18, 23, 13,  5, 19,  5,  3,  2,  9, 19, 13, 13, 17,  2,  5,
         2,  4,  5, 17,  2,  0,  0,  1, 12,  4, 13, 19,  6,  5])}, {'prot_tokens': tensor([10, 18,  7, 20, 18,  1, 11, 21, 14, 19,  6,  8,  8, 21,  7,  4, 21, 17,
         1, 23, 22,  9,  0,  8, 19,  3,  7,  7,  2, 18, 14,  7])}, {'prot_tokens': tensor([ 2,  7,  8, 23,  6,  2,  9, 22, 21,  3, 17, 23, 18,  8,  7, 10,  5, 17,
        23,  8,  1, 22, 17, 10, 23,  9, 15,  0, 22, 19,  8,  1])}, {'prot_tokens': tensor([ 9, 13, 13, 10,  6,  7,  6, 13, 20, 21,  4, 14,  9, 11,  9, 20, 23,  9,
        16, 15, 14,  6, 22, 11, 10,  5, 21, 13, 18, 22,  4, 12])}, {'prot_tokens': tensor([ 4, 22,  3,  7, 23,  5,  9, 19, 22, 11, 23,  7,  8, 18,  8,  3, 22, 13,
        21,  7,  0,  2,  2,  6, 23,  8, 11, 19, 23,  4,  1,  0])}, {'prot_tokens': tensor([11, 15,  3,  2, 14, 12, 22,  3,  9, 14,  6,  9, 12,  6, 13, 15,  0, 16,
         1,  3, 10,  8,  4,  3, 23, 17, 20, 20, 17,  7, 22, 18])}, {'prot_tokens': tensor([ 8,  2, 10,  1, 13,  7, 19,  0, 18,  1, 22,  5, 22,  1,  1, 21, 20, 23,
         3,  6, 14, 10, 23, 19, 18, 14, 15, 13, 14, 23, 22, 23])}, {'prot_tokens': tensor([ 2,  8, 22, 17,  7, 17,  0, 23, 10, 10,  8, 15, 12,  0,  4, 16,  4,  2,
         0, 21,  5,  1, 11,  6, 13, 22, 23,  2,  9, 11,  7,  7])}, {'prot_tokens': tensor([18, 19, 20,  4,  1, 20,  9,  5,  5, 21, 23,  9, 15, 11, 13, 12, 16,  8,
        14, 16, 14,  5, 17,  8, 12,  0, 22, 10,  3, 21,  4,  9])}, {'prot_tokens': tensor([10,  7, 10, 19,  7, 15,  7, 18, 12, 22,  1, 17, 11, 18, 17,  9,  3, 17,
        13,  8, 11, 20, 21, 12,  6,  6, 11, 17, 11, 16,  2, 19])}, {'prot_tokens': tensor([20, 17,  7, 11, 14, 10, 14,  0,  4, 13, 17, 16, 22, 14,  3, 13,  8,  6,
         6, 18,  1,  3,  6, 16,  0,  2,  2, 18, 20, 10,  3, 21])}, {'prot_tokens': tensor([22,  2,  9,  8,  2, 15,  2, 15,  7,  3, 19,  6, 12, 18, 10,  6, 17, 20,
         3,  4, 16, 16,  2,  9,  2,  5, 14, 23, 17, 20,  0, 20])}, {'prot_tokens': tensor([18, 18, 13, 20, 18,  1,  1, 18, 17, 22,  0, 16, 20,  2, 14,  0, 14, 11,
         5,  7, 17, 12, 12,  6, 19, 17,  7, 20,  2, 23, 19,  9])}, {'prot_tokens': tensor([ 0, 14, 15,  8, 11,  3,  1, 17,  2, 16, 20,  6,  0,  2, 19, 13, 19,  0,
         7,  3,  0, 12, 11,  9, 10, 15,  5, 16, 12,  1, 15, 16])}, {'prot_tokens': tensor([23, 10, 11,  1, 13,  9,  9, 19, 22,  1, 23,  7,  3, 15, 12,  4, 23,  8,
        12,  0,  4, 13,  7,  5, 23, 23, 22, 17, 22, 20, 13, 13])}, {'prot_tokens': tensor([ 6,  1,  0,  4, 16, 18,  6, 22,  8,  6, 22,  7, 15,  4, 19, 14,  5, 11,
        10, 16, 10, 22, 12,  0, 18,  4, 17, 19, 20,  0, 23, 21])}, {'prot_tokens': tensor([ 5,  5,  8,  9,  3,  8,  0, 23, 17,  6,  7, 18, 15,  0,  6, 11,  5,  2,
        21, 11,  4, 19, 14, 16, 22, 17,  7, 22, 12,  4,  0, 11])}, {'prot_tokens': tensor([ 4,  7, 17,  9, 11, 18,  2,  4,  6,  3, 20,  2,  6,  6, 13,  5, 23, 17,
        13,  6,  4,  5,  0,  4,  5,  3, 19, 17,  9, 23,  8, 19])}, {'prot_tokens': tensor([16,  5,  6, 22,  9, 12, 23, 22, 15,  0,  4, 21,  8,  5, 13, 12, 23, 10,
        22,  4, 15,  8,  7, 16, 11, 16, 13, 14, 17, 21, 18, 19])}, {'prot_tokens': tensor([ 0,  0, 19,  2, 13,  5, 19,  5,  9, 23, 12,  5, 14, 19, 23, 23, 22,  9,
         5, 20, 19,  0, 21, 10, 20,  0,  9,  2, 18,  2,  9,  6])}, {'prot_tokens': tensor([ 9,  5,  6,  4, 23,  6, 15,  5, 20, 22,  6, 15,  8, 13, 14, 10,  4, 21,
         8,  0,  4, 10, 23, 15,  4, 22, 21, 21,  7, 14, 11,  7])}, {'prot_tokens': tensor([ 6,  0, 13,  7, 15, 17,  7, 16,  3, 12, 18,  1,  7,  6,  8,  1, 15, 17,
        13, 12,  6, 17, 21, 12, 15, 21,  9, 19,  7, 17,  9,  6])}, {'prot_tokens': tensor([21, 21, 14, 11,  0, 21, 11,  3,  8, 22, 18, 15,  6,  2,  4,  0, 12,  4,
        18,  1,  0, 15, 18,  9, 21, 23, 20, 19,  0,  8, 17, 12])}, {'prot_tokens': tensor([15, 20, 14,  3,  6,  1, 10, 15,  0, 14, 23, 20, 13, 16, 10, 10, 13,  5,
         3,  8, 23,  0, 17,  6,  1, 16,  6,  1,  4,  6, 19, 23])}, {'prot_tokens': tensor([22, 12, 20, 20, 11, 13, 14,  4, 19, 15, 20,  6, 10, 18, 16, 13, 20, 10,
        20, 16, 16,  5, 19, 17, 23, 22, 13, 22,  2,  4,  3, 11])}, {'prot_tokens': tensor([14,  7, 15, 19,  7, 18,  3, 19, 12,  2, 13, 15, 11,  9, 12, 20,  0,  8,
        23, 19,  4, 15, 21, 19, 23,  6,  1, 19, 20, 19,  5,  8])}, {'prot_tokens': tensor([ 7, 20,  2, 23,  6,  0, 10,  8, 11, 10, 11, 16, 23, 11, 13,  0, 17,  6,
        19, 21, 10,  1,  2, 19,  6, 10, 14, 14, 15, 12,  4,  8])}, {'prot_tokens': tensor([15, 13,  6,  6,  9, 13,  5,  7,  9,  1,  8, 19, 21, 13, 15,  8, 12, 16,
         5,  9, 20,  1, 17, 15,  8,  3, 15, 20,  5, 10, 22,  2])}, {'prot_tokens': tensor([14, 14,  8, 18, 18, 17,  0, 12, 23,  2, 12, 12,  1, 21, 20, 21, 18, 13,
         2, 16,  2, 20,  5,  1,  2,  4, 14, 12,  8,  6,  6, 12])}, {'prot_tokens': tensor([15, 11,  6,  3, 20, 17,  6, 14, 16, 23, 21, 17,  4,  2, 19, 13, 19, 15,
        12,  7, 12, 13, 21, 21, 16, 23, 21, 23, 12,  1,  3,  2])}, {'prot_tokens': tensor([18,  8, 15, 20,  4, 20, 15, 12, 21, 11, 18, 19, 13, 18, 12,  8,  0,  6,
        23, 11,  6,  3, 18,  6, 11, 19, 22,  9,  6, 12,  8, 17])}, {'prot_tokens': tensor([20, 18,  2, 13, 16, 22, 20,  1, 21, 18, 17, 10, 11, 12, 14, 16, 12, 21,
         2, 13,  8,  0,  7, 21,  2,  8,  5, 12, 18,  3, 19, 16])}, {'prot_tokens': tensor([ 0, 19,  3, 20,  6, 17, 20, 19,  2,  6, 11, 13,  8, 21, 21, 16, 18,  4,
         7,  3,  2, 23, 15,  5, 22, 15, 15, 13, 20,  1, 19,  4])}, {'prot_tokens': tensor([20, 22,  4, 23, 16, 14, 17, 15, 17, 14,  3, 14,  0, 11, 10, 14, 23,  9,
         6,  9,  3, 18,  1,  1, 12, 21, 21, 11,  5, 15, 10, 19])}, {'prot_tokens': tensor([19,  2, 14,  3,  1,  8,  9, 13, 20,  7, 13, 19, 12,  8, 20, 21,  1,  5,
         5, 20,  6, 15,  0,  9,  5,  7, 14, 18, 12, 11,  1,  2])}, {'prot_tokens': tensor([23,  5,  0, 19,  9, 23,  0, 20, 18,  0, 12,  4, 15, 10, 23,  7, 13, 13,
        12,  5,  1, 10, 19,  3, 11,  1,  5,  9, 12, 23, 18, 16])}, {'prot_tokens': tensor([ 3, 11, 17, 20, 15,  7,  7,  2, 10, 19,  9,  9, 16, 23, 21,  0, 16, 14,
        18, 16, 13, 19, 20,  9,  3,  1,  6,  1, 21,  7,  2, 12])}, {'prot_tokens': tensor([ 5, 10,  6,  3,  4, 12,  5,  3,  6, 12, 22,  8, 17, 23, 13, 19, 10,  4,
         6, 23, 12, 22,  2,  0,  7, 17, 22, 17,  8, 12, 17,  7])}, {'prot_tokens': tensor([ 8, 18,  6, 15, 12,  4,  9,  6, 13,  9, 10, 20, 15,  1, 11, 11,  8,  0,
        15, 20, 11,  7,  4,  4,  4, 10,  2, 18,  9,  3, 22, 15])}, {'prot_tokens': tensor([ 8, 14,  2, 13,  2, 20, 23, 23, 15, 23,  0, 19,  2, 16,  7, 15,  5, 17,
         6, 21,  3,  0,  8,  0, 15,  4,  0, 20, 19, 13, 16, 16])}, {'prot_tokens': tensor([17, 23,  1,  8, 13, 20,  0, 10, 21, 21, 21, 22, 18, 17,  3, 16, 19, 16,
        17, 14,  6,  3, 18,  2, 14,  6, 20,  8,  6, 18,  2, 10])}, {'prot_tokens': tensor([ 4,  4, 22, 16, 10, 18, 12,  8, 17, 14,  5, 20, 11,  6,  1,  6, 19,  7,
        14,  2, 14, 19,  1, 12, 20,  9, 21, 18, 11, 22,  8,  4])}, {'prot_tokens': tensor([ 2, 13, 17,  9, 13, 10, 10,  1, 17, 23, 11, 11,  1, 12, 23, 14,  2, 22,
        19, 15,  4, 13,  3,  4, 11, 22, 16, 13, 19, 17,  2, 13])}, {'prot_tokens': tensor([14, 23, 12, 11, 16, 21,  7,  4,  2,  9, 16,  0, 23, 13, 17,  6, 19, 21,
        22, 18, 20,  4, 16,  0, 22,  5,  9, 20,  4,  8,  0, 22])}, {'prot_tokens': tensor([ 5,  6, 15,  2, 23,  0, 23,  4,  3,  8,  1, 15,  0, 13, 22, 19,  0,  2,
        18,  0,  2, 20,  5, 18, 15,  6, 21,  9,  0, 13, 21,  0])}, {'prot_tokens': tensor([ 2, 13,  6, 17,  6, 11, 13, 22, 15, 13,  3,  3,  7, 20, 22,  8,  0, 16,
         1,  2, 12,  9, 21, 14,  0, 10, 21,  6, 13, 20, 17,  6])}, {'prot_tokens': tensor([ 2,  4, 12,  6, 20, 18, 13, 14,  5, 22,  4, 17,  2, 21, 14,  5, 15, 11,
         6, 14, 10, 18, 18,  9, 11, 16,  0, 11, 10, 16,  5, 17])}, {'prot_tokens': tensor([10, 22,  0, 19,  2,  4, 10,  4,  5, 16,  1, 16,  3, 19,  3, 10, 10,  4,
         0, 10, 20, 20,  6,  4, 20,  9, 13, 12,  8, 19,  7, 15])}]
Trainer initialized. Device: cpu
self.rank=0
self.device=device(type='cpu')
Config loaded from: /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmpkw3sve6s/test_config.yaml
📝 File logging enabled: /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmpkw3sve6s/logs/training_20250926_202438.log
✅ CPU training without mixed precision
🧬 Sampling method configured: rigorous
📊 Using CTMC sampling with 50 steps
🔧 Predictor: {getattr(self.cfg.sampling, 'predictor', 'euler')} 
🎯 Noise removal: {getattr(self.cfg.sampling, 'noise_removal', True)}
   🧪 Quick generation tests every 40 steps
Starting training...
Setting up data loaders...
Loading custom dataset: /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmpkw3sve6s/dummy_data.pt sans ddp
📁 Loading file (0.0GB) into memory...
Loaded 100 pre-tokenized sequences from /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmpkw3sve6s/dummy_data.pt
Train dataset: 95 samples
Val dataset: 5 samples
Batch size: 4
Train batches: 23
Val batches: 2
Data loaders ready.
Setting up model...
✅ Using V100-compatible SEDD model (no flash attention required)
⚠️  Gradient checkpointing not supported by V100 model
Model ready. Parameters: 19,856,384
Setting up optimizer...
📊 Single GPU Learning Rate: 2.00e-05
✅ Using CPU without mixed precision
✅ Scheduler configured with scaled LR: max=2.00e-05, warmup_steps=2500
Optimizer ready.
✅ Using model without DDP wrapper
📝 Wandb disabled - using file logging instead
🆕 No existing checkpoint found. Starting training from scratch...
🚀 Starting training for 25000 steps (from step 0)...

🧪 Running initial generation test to verify setup...

🧬 Quick generation test - Step 0 (max_length: 32)
🧬 Generating 2 protein sequences using rigorous CTMC sampling...
Flash attention rotary failed (Pointer argument (at 0) cannot be accessed from Triton (cpu tensor?)), using native implementation
⚠️  Error in rigorous sampling: The size of tensor a (64) must match the size of tensor b (32) at non-singleton dimension 4
🔄 Falling back to simple generation method...
🧬 Generating 2 protein sequences using simple heuristic sampling...
⚠️  Error generating sample 0: index out of range in self
⚠️  Error generating sample 1: index out of range in self
   ⚠️  No valid sequences generated (2 attempted)
⚠️  Initial generation test had issues - but continuing training
🔄 Training for 5 epochs (override: None, config: 5)
📊 Probabilistic curriculum: step=0, progress=0.00, avg_t=0.249, low_noise%=50.0, high_noise%=0.0
Flash attention rotary failed (Pointer argument (at 0) cannot be accessed from Triton (cpu tensor?)), using native implementation
FAILED
tests/test_checkpoint_resume.py::TestCheckpointResume::test_checkpoint_corruption_handling [{'prot_tokens': tensor([22, 21,  7, 17, 23,  5, 19,  6, 14, 17,  8, 16,  3, 10, 11, 22, 21,  9,
        18, 12,  4, 17,  4, 19, 23, 16,  0, 13, 10,  5,  9, 19])}, {'prot_tokens': tensor([16, 23, 21,  8,  4, 14,  8, 18, 19, 23, 12, 13,  3,  4,  3, 17,  6,  7,
        19, 23, 20, 20, 15, 23, 13, 23, 22,  4, 10, 12,  1, 17])}, {'prot_tokens': tensor([11,  2,  2,  2, 15,  6, 21, 19, 23, 21, 11, 16,  4,  6, 19, 15, 15, 20,
        13, 14, 19,  7, 10, 18,  8, 22, 10,  6,  4, 21,  9, 23])}, {'prot_tokens': tensor([16, 16,  9,  9,  9,  4,  7,  5, 10,  7, 23, 20, 15, 20,  7,  4, 17,  5,
        16,  4,  4,  1, 14, 19, 16, 21,  9, 23,  2,  5,  6,  5])}, {'prot_tokens': tensor([14,  8,  8, 15, 11,  5, 14, 14, 14,  9,  5, 20, 16, 17,  5,  6, 18,  0,
         4,  0,  5, 12, 19,  8, 18, 14,  9, 18, 14, 21, 18,  5])}, {'prot_tokens': tensor([18, 14,  9, 23, 23,  7, 22, 18, 16,  6,  7,  5, 19, 11, 12, 19, 22, 16,
        17, 14, 10,  7, 13,  4, 11, 19,  5,  3, 15,  8, 18,  9])}, {'prot_tokens': tensor([ 6,  8,  2, 16,  5, 17, 20, 23,  9, 18, 19,  3,  4,  6,  2, 13, 12, 23,
         6, 11,  2,  2,  2, 16, 21, 17, 21, 23, 13, 19,  1, 22])}, {'prot_tokens': tensor([15, 14,  3, 23, 21,  0,  6, 16,  6, 21, 16, 19, 14,  3,  8,  7, 15, 11,
         3,  9,  9, 16,  4,  1,  1, 17, 13,  4, 21,  8, 13,  2])}, {'prot_tokens': tensor([ 2,  2,  1,  8, 23, 12, 18, 16,  6,  3, 22, 21, 10,  7, 18, 10, 10, 13,
        21, 18, 22, 11, 19,  5, 18, 17, 23,  6,  0,  8,  8,  0])}, {'prot_tokens': tensor([ 5,  7,  3, 18, 15, 10, 17,  1, 20, 13, 23, 21, 16,  3, 12,  9,  0, 23,
         6, 20,  9, 23,  3,  7,  4, 18, 16, 23, 15,  5,  8, 21])}, {'prot_tokens': tensor([ 7,  4, 13, 22, 16,  4,  4, 13,  0, 20, 14, 14,  6, 16, 17,  7,  0,  8,
        22, 18, 11, 21,  1,  5, 21, 23, 16,  3,  8, 19,  1, 17])}, {'prot_tokens': tensor([ 2, 20, 12, 17, 21,  9, 13, 19, 23,  5, 20,  7, 14,  2, 13, 23,  3,  9,
        15,  4, 17, 20, 21, 23,  5,  0,  9, 23,  2, 11, 22, 23])}, {'prot_tokens': tensor([ 3, 14,  1, 21,  8,  5, 14,  2,  3, 20, 19, 20, 17, 18, 18, 10, 20,  9,
         9,  7, 13, 21, 14, 15, 18,  6, 15,  3,  8, 16, 17,  4])}, {'prot_tokens': tensor([ 8, 23,  3, 13,  5,  4,  0,  6,  6,  8,  8, 18, 13, 21, 19, 12,  0,  4,
        12,  2, 18,  9,  8, 20, 18,  3, 12, 19, 22, 21, 12, 10])}, {'prot_tokens': tensor([18,  9, 23,  9, 14, 16,  5, 18, 12,  4, 22,  8,  1,  3, 12, 16,  3,  1,
        19, 22, 19,  4,  5, 23, 16, 10,  4, 15, 17, 19, 20, 12])}, {'prot_tokens': tensor([13, 15, 11,  6, 17, 23, 23, 17,  8,  6,  6, 14,  5,  1,  0,  4, 18, 21,
         8,  4,  1,  4, 16,  8, 19, 16, 23,  8,  3, 11,  2, 14])}, {'prot_tokens': tensor([17, 12,  0,  3, 12, 13, 15, 12, 16, 16, 19,  5, 15, 22, 11,  7,  7, 16,
        10, 10,  8, 12,  4, 16, 11,  2,  7, 14, 17,  4,  4, 14])}, {'prot_tokens': tensor([23, 13, 14, 20, 14, 11,  9, 12, 19,  7,  3,  7, 19,  2, 21,  2, 22, 11,
         0, 14,  5,  9,  8, 13, 17,  5,  4,  9, 19,  5,  7, 12])}, {'prot_tokens': tensor([ 4,  0, 10, 17,  7,  8,  2, 22, 21, 21, 14, 14, 12, 14,  0,  6,  7,  0,
         9, 12,  9, 20,  9, 21, 10,  3, 10, 20,  3, 12,  7,  8])}, {'prot_tokens': tensor([15,  4,  8,  5, 21,  8, 23, 10,  4, 21, 17,  0,  9,  8, 15, 11,  5, 15,
        19,  1,  9, 16, 20, 12, 13, 19, 14, 14, 13,  9, 19, 22])}, {'prot_tokens': tensor([ 6, 12, 22, 20, 11, 18,  2, 14,  5, 10,  3,  9, 20, 18,  2, 17, 15, 15,
         4, 15, 21, 19,  4,  1, 22,  8, 12, 18, 22, 14, 21,  0])}, {'prot_tokens': tensor([12, 21,  4, 23, 19,  8,  8, 13, 20,  5,  2,  0, 17, 14,  6,  6, 10,  8,
         9, 17, 23, 18,  7, 20,  1, 15,  2, 18,  7, 20,  3,  7])}, {'prot_tokens': tensor([ 8,  2,  5, 15,  2, 19, 12,  6, 10, 17,  8, 12,  5,  2, 23, 19,  9, 12,
         8,  8, 17, 20,  3,  9, 15, 14,  4, 19,  9,  4, 11, 13])}, {'prot_tokens': tensor([14,  9, 14,  6, 18, 21,  9, 16,  4,  5,  4, 18,  2,  6,  4, 15,  2, 21,
        21,  1,  7, 19, 12, 11, 16,  2, 23,  0,  6, 18, 12,  2])}, {'prot_tokens': tensor([ 8, 15, 21,  0, 14,  7, 17,  5,  7, 16,  8, 14,  3, 14, 10,  9, 10, 18,
        20,  3,  2,  8, 21, 10, 14, 19,  9,  8, 21, 10, 17, 10])}, {'prot_tokens': tensor([16,  7, 13,  0,  5,  7,  1, 16, 23, 18, 19, 10, 11,  0,  9, 13, 23, 22,
         4,  7, 10, 19, 13, 22,  4, 13, 22, 18, 14, 19, 16,  8])}, {'prot_tokens': tensor([20, 20, 22,  2,  4, 18, 16, 12, 13, 19,  6, 16,  4, 15, 13, 16,  5,  9,
        10, 16,  5, 10, 11, 11, 12, 10, 10, 21,  0,  1,  1, 15])}, {'prot_tokens': tensor([16, 11,  6,  6, 12, 14, 23, 17, 17, 20,  1, 14, 22, 12, 10,  7,  3, 20,
        11,  0,  7, 15,  4, 12, 16,  0, 10, 17, 22, 18, 13,  3])}, {'prot_tokens': tensor([ 8,  8, 21, 23, 11,  6,  7, 15, 16,  8, 19,  0, 11,  3,  7,  8,  3, 10,
        19, 20, 19, 11,  8,  3, 16, 10, 16, 18, 22, 14, 12, 17])}, {'prot_tokens': tensor([23,  5,  8, 17, 23,  3, 14,  5, 11, 15, 14,  9, 21, 14, 21, 16, 12, 21,
         9,  7,  2, 23, 17, 15, 21,  6,  9, 17, 22, 16, 16, 17])}, {'prot_tokens': tensor([ 8, 10, 12, 13, 17, 11, 16,  8, 16, 19,  0, 13, 10, 16, 16, 23, 22, 13,
        12,  6,  2, 11, 20,  8, 23, 17, 13,  8,  7, 12,  3,  3])}, {'prot_tokens': tensor([18,  0,  9, 14, 20,  4,  3, 19, 19, 12,  2, 10,  0,  6,  9,  7, 21,  0,
        15, 22,  6, 13,  6, 16, 10,  8, 11, 10, 22,  4, 19, 18])}, {'prot_tokens': tensor([17, 14, 15,  2,  0,  8,  8, 13, 11, 18,  2, 20, 11, 12, 21, 10,  3,  3,
         0,  4,  0, 18, 18,  9,  2, 22,  9,  3,  2, 15, 18, 15])}, {'prot_tokens': tensor([18,  3, 18, 17, 12, 14, 15, 13, 12, 12, 15, 10,  9, 11,  4,  0,  6,  8,
        11, 23, 14,  0, 10, 13, 14, 20, 19, 20,  1, 14,  6, 13])}, {'prot_tokens': tensor([21, 21,  1,  5,  6, 18, 23, 14, 16, 14, 15,  2,  4, 17,  4, 20, 14, 10,
         2,  4, 22,  3,  1,  1,  0,  7,  2, 18, 15,  4,  6, 19])}, {'prot_tokens': tensor([19,  8,  6, 21,  5,  1, 18, 20, 19, 13,  2, 12, 13, 23, 10, 11,  5,  3,
         1, 21,  3,  8, 16, 22,  4, 21, 19, 16, 19,  2, 14, 12])}, {'prot_tokens': tensor([14, 18,  2, 13, 23, 12,  8,  6,  5,  5, 18, 16, 10,  3, 18, 13, 19,  6,
        21, 23,  1, 17,  9, 21, 20, 13, 11,  7,  0,  1,  7,  6])}, {'prot_tokens': tensor([17, 23, 15, 14, 15,  7,  8, 21, 16,  3, 15,  7, 19,  7, 11,  8, 11, 14,
        21,  7,  0,  0,  1,  5,  0, 13, 16,  6, 21,  7, 12,  2])}, {'prot_tokens': tensor([ 0, 13, 17,  8, 10,  1, 12, 11, 16, 23,  8, 10,  2,  1, 17,  3, 10, 21,
        20,  0,  9,  8,  9,  9,  2, 21,  8,  0, 18,  2, 13, 14])}, {'prot_tokens': tensor([20, 17, 11, 21,  2,  6,  5, 20,  9,  5,  8,  0,  5,  3, 14,  4, 13,  3,
         4, 18, 23, 16, 15, 23, 18, 15, 16,  1,  1,  4, 19, 13])}, {'prot_tokens': tensor([19, 16,  6,  5, 23,  4,  9,  8,  4,  4, 23, 22,  2,  8,  2,  3, 10, 19,
        22,  7, 17, 19,  2,  5, 15, 23, 10, 10, 13, 16, 18, 10])}, {'prot_tokens': tensor([16,  9, 14,  4,  8, 16,  0,  4, 10, 21,  3,  1,  6, 14,  0, 22,  2, 14,
        20, 11, 14,  7, 11, 10,  1, 13,  8, 19,  0, 22, 12, 22])}, {'prot_tokens': tensor([ 1, 15,  6,  8, 14,  9, 22, 22,  5, 14, 15,  3, 13, 17, 23, 12,  3,  9,
        18, 23, 16, 14,  2,  1,  3, 15, 11,  0,  4, 12, 13, 11])}, {'prot_tokens': tensor([13, 15, 21,  1, 14, 12, 17,  1,  2, 18, 22, 19,  3,  6,  6,  1,  4, 14,
         8,  7,  4, 12,  1, 16, 10, 18, 19, 14,  5,  5,  9, 21])}, {'prot_tokens': tensor([11,  0, 16,  4,  4, 23,  9, 11, 21, 10, 19, 22, 21, 22, 19, 12,  0,  0,
         6,  9, 11, 21,  9, 19, 20,  6, 22,  0, 22,  1,  4,  0])}, {'prot_tokens': tensor([ 8, 20,  5, 10, 18,  7, 17,  0, 19,  9, 18, 12, 12, 10,  1,  0, 10,  5,
         1,  5, 23,  6, 19,  3, 21, 12, 17, 20, 13, 16, 17,  7])}, {'prot_tokens': tensor([ 6, 13, 20, 19,  0,  2,  7,  3,  5, 12, 21, 18,  7, 15,  6, 21,  9,  8,
        15, 15, 20,  4, 23,  2, 23, 11,  5,  6, 13, 13,  5, 11])}, {'prot_tokens': tensor([ 5, 10, 22,  3,  1, 15, 18, 16, 22, 21,  3, 20,  0, 17, 14,  7, 19,  5,
         0,  8,  9, 19, 21, 11,  1, 17, 11,  3, 22,  2, 20,  3])}, {'prot_tokens': tensor([19, 14,  7, 17,  1, 20,  5,  1, 12,  0, 20,  8, 13,  7,  0, 18,  8,  3,
        17,  2, 16, 12, 13, 13,  7, 22, 11,  4, 23, 21, 15, 11])}, {'prot_tokens': tensor([18,  2,  7, 16, 20,  2, 21, 19,  9, 10, 15, 15,  4, 15, 16, 15, 10, 15,
         0,  5,  4, 11,  5,  6, 12,  9,  0,  5,  0, 15,  3,  9])}, {'prot_tokens': tensor([ 5,  0, 14, 15,  7, 16,  8,  1, 15, 21,  5, 12,  7,  0, 21, 14, 13, 15,
         5,  2, 10, 16,  7, 20,  3,  0, 19, 15, 16, 11, 12,  3])}, {'prot_tokens': tensor([ 2,  1,  0, 19, 11, 11, 16, 16,  8, 10, 19, 19,  5, 22, 19, 20, 14,  5,
        23,  3, 21,  6, 16,  5, 14, 23,  6,  6, 12, 20, 23, 21])}, {'prot_tokens': tensor([ 3,  9, 18, 18, 23, 13,  5, 19,  5,  3,  2,  9, 19, 13, 13, 17,  2,  5,
         2,  4,  5, 17,  2,  0,  0,  1, 12,  4, 13, 19,  6,  5])}, {'prot_tokens': tensor([10, 18,  7, 20, 18,  1, 11, 21, 14, 19,  6,  8,  8, 21,  7,  4, 21, 17,
         1, 23, 22,  9,  0,  8, 19,  3,  7,  7,  2, 18, 14,  7])}, {'prot_tokens': tensor([ 2,  7,  8, 23,  6,  2,  9, 22, 21,  3, 17, 23, 18,  8,  7, 10,  5, 17,
        23,  8,  1, 22, 17, 10, 23,  9, 15,  0, 22, 19,  8,  1])}, {'prot_tokens': tensor([ 9, 13, 13, 10,  6,  7,  6, 13, 20, 21,  4, 14,  9, 11,  9, 20, 23,  9,
        16, 15, 14,  6, 22, 11, 10,  5, 21, 13, 18, 22,  4, 12])}, {'prot_tokens': tensor([ 4, 22,  3,  7, 23,  5,  9, 19, 22, 11, 23,  7,  8, 18,  8,  3, 22, 13,
        21,  7,  0,  2,  2,  6, 23,  8, 11, 19, 23,  4,  1,  0])}, {'prot_tokens': tensor([11, 15,  3,  2, 14, 12, 22,  3,  9, 14,  6,  9, 12,  6, 13, 15,  0, 16,
         1,  3, 10,  8,  4,  3, 23, 17, 20, 20, 17,  7, 22, 18])}, {'prot_tokens': tensor([ 8,  2, 10,  1, 13,  7, 19,  0, 18,  1, 22,  5, 22,  1,  1, 21, 20, 23,
         3,  6, 14, 10, 23, 19, 18, 14, 15, 13, 14, 23, 22, 23])}, {'prot_tokens': tensor([ 2,  8, 22, 17,  7, 17,  0, 23, 10, 10,  8, 15, 12,  0,  4, 16,  4,  2,
         0, 21,  5,  1, 11,  6, 13, 22, 23,  2,  9, 11,  7,  7])}, {'prot_tokens': tensor([18, 19, 20,  4,  1, 20,  9,  5,  5, 21, 23,  9, 15, 11, 13, 12, 16,  8,
        14, 16, 14,  5, 17,  8, 12,  0, 22, 10,  3, 21,  4,  9])}, {'prot_tokens': tensor([10,  7, 10, 19,  7, 15,  7, 18, 12, 22,  1, 17, 11, 18, 17,  9,  3, 17,
        13,  8, 11, 20, 21, 12,  6,  6, 11, 17, 11, 16,  2, 19])}, {'prot_tokens': tensor([20, 17,  7, 11, 14, 10, 14,  0,  4, 13, 17, 16, 22, 14,  3, 13,  8,  6,
         6, 18,  1,  3,  6, 16,  0,  2,  2, 18, 20, 10,  3, 21])}, {'prot_tokens': tensor([22,  2,  9,  8,  2, 15,  2, 15,  7,  3, 19,  6, 12, 18, 10,  6, 17, 20,
         3,  4, 16, 16,  2,  9,  2,  5, 14, 23, 17, 20,  0, 20])}, {'prot_tokens': tensor([18, 18, 13, 20, 18,  1,  1, 18, 17, 22,  0, 16, 20,  2, 14,  0, 14, 11,
         5,  7, 17, 12, 12,  6, 19, 17,  7, 20,  2, 23, 19,  9])}, {'prot_tokens': tensor([ 0, 14, 15,  8, 11,  3,  1, 17,  2, 16, 20,  6,  0,  2, 19, 13, 19,  0,
         7,  3,  0, 12, 11,  9, 10, 15,  5, 16, 12,  1, 15, 16])}, {'prot_tokens': tensor([23, 10, 11,  1, 13,  9,  9, 19, 22,  1, 23,  7,  3, 15, 12,  4, 23,  8,
        12,  0,  4, 13,  7,  5, 23, 23, 22, 17, 22, 20, 13, 13])}, {'prot_tokens': tensor([ 6,  1,  0,  4, 16, 18,  6, 22,  8,  6, 22,  7, 15,  4, 19, 14,  5, 11,
        10, 16, 10, 22, 12,  0, 18,  4, 17, 19, 20,  0, 23, 21])}, {'prot_tokens': tensor([ 5,  5,  8,  9,  3,  8,  0, 23, 17,  6,  7, 18, 15,  0,  6, 11,  5,  2,
        21, 11,  4, 19, 14, 16, 22, 17,  7, 22, 12,  4,  0, 11])}, {'prot_tokens': tensor([ 4,  7, 17,  9, 11, 18,  2,  4,  6,  3, 20,  2,  6,  6, 13,  5, 23, 17,
        13,  6,  4,  5,  0,  4,  5,  3, 19, 17,  9, 23,  8, 19])}, {'prot_tokens': tensor([16,  5,  6, 22,  9, 12, 23, 22, 15,  0,  4, 21,  8,  5, 13, 12, 23, 10,
        22,  4, 15,  8,  7, 16, 11, 16, 13, 14, 17, 21, 18, 19])}, {'prot_tokens': tensor([ 0,  0, 19,  2, 13,  5, 19,  5,  9, 23, 12,  5, 14, 19, 23, 23, 22,  9,
         5, 20, 19,  0, 21, 10, 20,  0,  9,  2, 18,  2,  9,  6])}, {'prot_tokens': tensor([ 9,  5,  6,  4, 23,  6, 15,  5, 20, 22,  6, 15,  8, 13, 14, 10,  4, 21,
         8,  0,  4, 10, 23, 15,  4, 22, 21, 21,  7, 14, 11,  7])}, {'prot_tokens': tensor([ 6,  0, 13,  7, 15, 17,  7, 16,  3, 12, 18,  1,  7,  6,  8,  1, 15, 17,
        13, 12,  6, 17, 21, 12, 15, 21,  9, 19,  7, 17,  9,  6])}, {'prot_tokens': tensor([21, 21, 14, 11,  0, 21, 11,  3,  8, 22, 18, 15,  6,  2,  4,  0, 12,  4,
        18,  1,  0, 15, 18,  9, 21, 23, 20, 19,  0,  8, 17, 12])}, {'prot_tokens': tensor([15, 20, 14,  3,  6,  1, 10, 15,  0, 14, 23, 20, 13, 16, 10, 10, 13,  5,
         3,  8, 23,  0, 17,  6,  1, 16,  6,  1,  4,  6, 19, 23])}, {'prot_tokens': tensor([22, 12, 20, 20, 11, 13, 14,  4, 19, 15, 20,  6, 10, 18, 16, 13, 20, 10,
        20, 16, 16,  5, 19, 17, 23, 22, 13, 22,  2,  4,  3, 11])}, {'prot_tokens': tensor([14,  7, 15, 19,  7, 18,  3, 19, 12,  2, 13, 15, 11,  9, 12, 20,  0,  8,
        23, 19,  4, 15, 21, 19, 23,  6,  1, 19, 20, 19,  5,  8])}, {'prot_tokens': tensor([ 7, 20,  2, 23,  6,  0, 10,  8, 11, 10, 11, 16, 23, 11, 13,  0, 17,  6,
        19, 21, 10,  1,  2, 19,  6, 10, 14, 14, 15, 12,  4,  8])}, {'prot_tokens': tensor([15, 13,  6,  6,  9, 13,  5,  7,  9,  1,  8, 19, 21, 13, 15,  8, 12, 16,
         5,  9, 20,  1, 17, 15,  8,  3, 15, 20,  5, 10, 22,  2])}, {'prot_tokens': tensor([14, 14,  8, 18, 18, 17,  0, 12, 23,  2, 12, 12,  1, 21, 20, 21, 18, 13,
         2, 16,  2, 20,  5,  1,  2,  4, 14, 12,  8,  6,  6, 12])}, {'prot_tokens': tensor([15, 11,  6,  3, 20, 17,  6, 14, 16, 23, 21, 17,  4,  2, 19, 13, 19, 15,
        12,  7, 12, 13, 21, 21, 16, 23, 21, 23, 12,  1,  3,  2])}, {'prot_tokens': tensor([18,  8, 15, 20,  4, 20, 15, 12, 21, 11, 18, 19, 13, 18, 12,  8,  0,  6,
        23, 11,  6,  3, 18,  6, 11, 19, 22,  9,  6, 12,  8, 17])}, {'prot_tokens': tensor([20, 18,  2, 13, 16, 22, 20,  1, 21, 18, 17, 10, 11, 12, 14, 16, 12, 21,
         2, 13,  8,  0,  7, 21,  2,  8,  5, 12, 18,  3, 19, 16])}, {'prot_tokens': tensor([ 0, 19,  3, 20,  6, 17, 20, 19,  2,  6, 11, 13,  8, 21, 21, 16, 18,  4,
         7,  3,  2, 23, 15,  5, 22, 15, 15, 13, 20,  1, 19,  4])}, {'prot_tokens': tensor([20, 22,  4, 23, 16, 14, 17, 15, 17, 14,  3, 14,  0, 11, 10, 14, 23,  9,
         6,  9,  3, 18,  1,  1, 12, 21, 21, 11,  5, 15, 10, 19])}, {'prot_tokens': tensor([19,  2, 14,  3,  1,  8,  9, 13, 20,  7, 13, 19, 12,  8, 20, 21,  1,  5,
         5, 20,  6, 15,  0,  9,  5,  7, 14, 18, 12, 11,  1,  2])}, {'prot_tokens': tensor([23,  5,  0, 19,  9, 23,  0, 20, 18,  0, 12,  4, 15, 10, 23,  7, 13, 13,
        12,  5,  1, 10, 19,  3, 11,  1,  5,  9, 12, 23, 18, 16])}, {'prot_tokens': tensor([ 3, 11, 17, 20, 15,  7,  7,  2, 10, 19,  9,  9, 16, 23, 21,  0, 16, 14,
        18, 16, 13, 19, 20,  9,  3,  1,  6,  1, 21,  7,  2, 12])}, {'prot_tokens': tensor([ 5, 10,  6,  3,  4, 12,  5,  3,  6, 12, 22,  8, 17, 23, 13, 19, 10,  4,
         6, 23, 12, 22,  2,  0,  7, 17, 22, 17,  8, 12, 17,  7])}, {'prot_tokens': tensor([ 8, 18,  6, 15, 12,  4,  9,  6, 13,  9, 10, 20, 15,  1, 11, 11,  8,  0,
        15, 20, 11,  7,  4,  4,  4, 10,  2, 18,  9,  3, 22, 15])}, {'prot_tokens': tensor([ 8, 14,  2, 13,  2, 20, 23, 23, 15, 23,  0, 19,  2, 16,  7, 15,  5, 17,
         6, 21,  3,  0,  8,  0, 15,  4,  0, 20, 19, 13, 16, 16])}, {'prot_tokens': tensor([17, 23,  1,  8, 13, 20,  0, 10, 21, 21, 21, 22, 18, 17,  3, 16, 19, 16,
        17, 14,  6,  3, 18,  2, 14,  6, 20,  8,  6, 18,  2, 10])}, {'prot_tokens': tensor([ 4,  4, 22, 16, 10, 18, 12,  8, 17, 14,  5, 20, 11,  6,  1,  6, 19,  7,
        14,  2, 14, 19,  1, 12, 20,  9, 21, 18, 11, 22,  8,  4])}, {'prot_tokens': tensor([ 2, 13, 17,  9, 13, 10, 10,  1, 17, 23, 11, 11,  1, 12, 23, 14,  2, 22,
        19, 15,  4, 13,  3,  4, 11, 22, 16, 13, 19, 17,  2, 13])}, {'prot_tokens': tensor([14, 23, 12, 11, 16, 21,  7,  4,  2,  9, 16,  0, 23, 13, 17,  6, 19, 21,
        22, 18, 20,  4, 16,  0, 22,  5,  9, 20,  4,  8,  0, 22])}, {'prot_tokens': tensor([ 5,  6, 15,  2, 23,  0, 23,  4,  3,  8,  1, 15,  0, 13, 22, 19,  0,  2,
        18,  0,  2, 20,  5, 18, 15,  6, 21,  9,  0, 13, 21,  0])}, {'prot_tokens': tensor([ 2, 13,  6, 17,  6, 11, 13, 22, 15, 13,  3,  3,  7, 20, 22,  8,  0, 16,
         1,  2, 12,  9, 21, 14,  0, 10, 21,  6, 13, 20, 17,  6])}, {'prot_tokens': tensor([ 2,  4, 12,  6, 20, 18, 13, 14,  5, 22,  4, 17,  2, 21, 14,  5, 15, 11,
         6, 14, 10, 18, 18,  9, 11, 16,  0, 11, 10, 16,  5, 17])}, {'prot_tokens': tensor([10, 22,  0, 19,  2,  4, 10,  4,  5, 16,  1, 16,  3, 19,  3, 10, 10,  4,
         0, 10, 20, 20,  6,  4, 20,  9, 13, 12,  8, 19,  7, 15])}]
Trainer initialized. Device: cpu
self.rank=0
self.device=device(type='cpu')
Config loaded from: /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmpk4fsangd/test_config.yaml
📝 File logging enabled: /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmpk4fsangd/logs/training_20250926_202439.log
✅ CPU training without mixed precision
🧬 Sampling method configured: rigorous
📊 Using CTMC sampling with 50 steps
🔧 Predictor: {getattr(self.cfg.sampling, 'predictor', 'euler')} 
🎯 Noise removal: {getattr(self.cfg.sampling, 'noise_removal', True)}
   🧪 Quick generation tests every 40 steps
Starting training...
Setting up data loaders...
Loading custom dataset: /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmpk4fsangd/dummy_data.pt sans ddp
📁 Loading file (0.0GB) into memory...
Loaded 100 pre-tokenized sequences from /var/tmp/pbs.6355535.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov/tmpk4fsangd/dummy_data.pt
Train dataset: 95 samples
Val dataset: 5 samples
Batch size: 4
Train batches: 23
Val batches: 2
Data loaders ready.
Setting up model...
✅ Using V100-compatible SEDD model (no flash attention required)
⚠️  Gradient checkpointing not supported by V100 model
Model ready. Parameters: 19,856,384
Setting up optimizer...
📊 Single GPU Learning Rate: 2.00e-05
✅ Using CPU without mixed precision
✅ Scheduler configured with scaled LR: max=2.00e-05, warmup_steps=2500
Optimizer ready.
✅ Using model without DDP wrapper
📝 Wandb disabled - using file logging instead
🆕 No existing checkpoint found. Starting training from scratch...
🚀 Starting training for 25000 steps (from step 0)...

🧪 Running initial generation test to verify setup...

🧬 Quick generation test - Step 0 (max_length: 32)
🧬 Generating 2 protein sequences using rigorous CTMC sampling...
Flash attention rotary failed (Pointer argument (at 0) cannot be accessed from Triton (cpu tensor?)), using native implementation
⚠️  Error in rigorous sampling: The size of tensor a (64) must match the size of tensor b (32) at non-singleton dimension 4
🔄 Falling back to simple generation method...
🧬 Generating 2 protein sequences using simple heuristic sampling...
⚠️  Error generating sample 0: index out of range in self
⚠️  Error generating sample 1: index out of range in self
   ⚠️  No valid sequences generated (2 attempted)
⚠️  Initial generation test had issues - but continuing training
🔄 Training for 5 epochs (override: None, config: 5)
📊 Probabilistic curriculum: step=0, progress=0.00, avg_t=0.249, low_noise%=50.0, high_noise%=0.0
Flash attention rotary failed (Pointer argument (at 0) cannot be accessed from Triton (cpu tensor?)), using native implementation
FAILED

=================================== FAILURES ===================================
________________ TestCheckpointResume.test_checkpoint_creation _________________
protlig_dd/model/rotary.py:78: in apply_rotary_pos_emb
    return flash_attn.layers.rotary.apply_rotary_emb_qkv_(
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/flash_attn/layers/rotary.py:233: in apply_rotary_emb_qkv_
    return ApplyRotaryEmbQKV_.apply(qkv, cos, sin, cos_k, sin_k, interleaved, seqlen_offsets)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/autograd/function.py:598: in apply
    return super().apply(*args, **kwargs)  # type: ignore[misc]
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/flash_attn/layers/rotary.py:151: in forward
    apply_rotary(
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/flash_attn/ops/triton/rotary.py:202: in apply_rotary
    rotary_kernel[grid](
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/triton/runtime/jit.py:167: in <lambda>
    return lambda *args, **kwargs: self.run(grid=grid, warmup=False, *args, **kwargs)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/triton/runtime/jit.py:425: in run
    kernel.run(grid_0, grid_1, grid_2, kernel.num_warps, kernel.num_ctas,  # number of warps/ctas per instance
E   ValueError: Pointer argument (at 0) cannot be accessed from Triton (cpu tensor?)

During handling of the above exception, another exception occurred:
tests/test_checkpoint_resume.py:263: in test_checkpoint_creation
    trainer.train(wandb_project='test_chk', wandb_name='test_chk')
protlig_dd/training/run_train_uniref_ddp_polaris.py:2362: in train
    loss, step_time, additional_metrics = self.train_step(batch)
protlig_dd/training/run_train_uniref_ddp_polaris.py:2007: in train_step
    loss = self.compute_loss(batch) / self.cfg.training.accum
protlig_dd/training/run_train_uniref_ddp_polaris.py:1981: in compute_loss
    raise e
protlig_dd/training/run_train_uniref_ddp_polaris.py:1943: in compute_loss
    log_score = model_to_use(perturbed_batch, sigma)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541: in _call_impl
    return forward_call(*args, **kwargs)
protlig_dd/model/transformer_v100.py:588: in forward
    x = self.blocks[i](x, rotary_cos_sin, c, seqlens=None)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541: in _call_impl
    return forward_call(*args, **kwargs)
protlig_dd/model/transformer_v100.py:427: in forward
    qkv = rotary.apply_rotary_pos_emb(
protlig_dd/model/rotary.py:87: in apply_rotary_pos_emb
    return _apply_rotary_pos_emb_native(qkv, cos, sin)
protlig_dd/model/rotary.py:69: in _apply_rotary_pos_emb_native
    return (qkv * cos) + (_rotate_half(qkv) * sin)
E   RuntimeError: The size of tensor a (64) must match the size of tensor b (32) at non-singleton dimension 4
_________________ TestCheckpointResume.test_checkpoint_resume __________________
protlig_dd/model/rotary.py:78: in apply_rotary_pos_emb
    return flash_attn.layers.rotary.apply_rotary_emb_qkv_(
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/flash_attn/layers/rotary.py:233: in apply_rotary_emb_qkv_
    return ApplyRotaryEmbQKV_.apply(qkv, cos, sin, cos_k, sin_k, interleaved, seqlen_offsets)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/autograd/function.py:598: in apply
    return super().apply(*args, **kwargs)  # type: ignore[misc]
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/flash_attn/layers/rotary.py:151: in forward
    apply_rotary(
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/flash_attn/ops/triton/rotary.py:202: in apply_rotary
    rotary_kernel[grid](
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/triton/runtime/jit.py:167: in <lambda>
    return lambda *args, **kwargs: self.run(grid=grid, warmup=False, *args, **kwargs)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/triton/runtime/jit.py:425: in run
    kernel.run(grid_0, grid_1, grid_2, kernel.num_warps, kernel.num_ctas,  # number of warps/ctas per instance
E   ValueError: Pointer argument (at 0) cannot be accessed from Triton (cpu tensor?)

During handling of the above exception, another exception occurred:
tests/test_checkpoint_resume.py:299: in test_checkpoint_resume
    trainer1.train(wandb_project = 'test_checkpointing', wandb_name = 'test_chck')
protlig_dd/training/run_train_uniref_ddp_polaris.py:2362: in train
    loss, step_time, additional_metrics = self.train_step(batch)
protlig_dd/training/run_train_uniref_ddp_polaris.py:2007: in train_step
    loss = self.compute_loss(batch) / self.cfg.training.accum
protlig_dd/training/run_train_uniref_ddp_polaris.py:1981: in compute_loss
    raise e
protlig_dd/training/run_train_uniref_ddp_polaris.py:1943: in compute_loss
    log_score = model_to_use(perturbed_batch, sigma)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541: in _call_impl
    return forward_call(*args, **kwargs)
protlig_dd/model/transformer_v100.py:588: in forward
    x = self.blocks[i](x, rotary_cos_sin, c, seqlens=None)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541: in _call_impl
    return forward_call(*args, **kwargs)
protlig_dd/model/transformer_v100.py:427: in forward
    qkv = rotary.apply_rotary_pos_emb(
protlig_dd/model/rotary.py:87: in apply_rotary_pos_emb
    return _apply_rotary_pos_emb_native(qkv, cos, sin)
protlig_dd/model/rotary.py:69: in _apply_rotary_pos_emb_native
    return (qkv * cos) + (_rotate_half(qkv) * sin)
E   RuntimeError: The size of tensor a (64) must match the size of tensor b (32) at non-singleton dimension 4
___________ TestCheckpointResume.test_fresh_start_ignores_checkpoint ___________
protlig_dd/model/rotary.py:78: in apply_rotary_pos_emb
    return flash_attn.layers.rotary.apply_rotary_emb_qkv_(
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/flash_attn/layers/rotary.py:233: in apply_rotary_emb_qkv_
    return ApplyRotaryEmbQKV_.apply(qkv, cos, sin, cos_k, sin_k, interleaved, seqlen_offsets)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/autograd/function.py:598: in apply
    return super().apply(*args, **kwargs)  # type: ignore[misc]
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/flash_attn/layers/rotary.py:151: in forward
    apply_rotary(
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/flash_attn/ops/triton/rotary.py:202: in apply_rotary
    rotary_kernel[grid](
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/triton/runtime/jit.py:167: in <lambda>
    return lambda *args, **kwargs: self.run(grid=grid, warmup=False, *args, **kwargs)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/triton/runtime/jit.py:425: in run
    kernel.run(grid_0, grid_1, grid_2, kernel.num_warps, kernel.num_ctas,  # number of warps/ctas per instance
E   ValueError: Pointer argument (at 0) cannot be accessed from Triton (cpu tensor?)

During handling of the above exception, another exception occurred:
tests/test_checkpoint_resume.py:352: in test_fresh_start_ignores_checkpoint
    trainer1.train(wandb_project='test_chk', wandb_name='test_chk')
protlig_dd/training/run_train_uniref_ddp_polaris.py:2362: in train
    loss, step_time, additional_metrics = self.train_step(batch)
protlig_dd/training/run_train_uniref_ddp_polaris.py:2007: in train_step
    loss = self.compute_loss(batch) / self.cfg.training.accum
protlig_dd/training/run_train_uniref_ddp_polaris.py:1981: in compute_loss
    raise e
protlig_dd/training/run_train_uniref_ddp_polaris.py:1943: in compute_loss
    log_score = model_to_use(perturbed_batch, sigma)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541: in _call_impl
    return forward_call(*args, **kwargs)
protlig_dd/model/transformer_v100.py:588: in forward
    x = self.blocks[i](x, rotary_cos_sin, c, seqlens=None)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541: in _call_impl
    return forward_call(*args, **kwargs)
protlig_dd/model/transformer_v100.py:427: in forward
    qkv = rotary.apply_rotary_pos_emb(
protlig_dd/model/rotary.py:87: in apply_rotary_pos_emb
    return _apply_rotary_pos_emb_native(qkv, cos, sin)
protlig_dd/model/rotary.py:69: in _apply_rotary_pos_emb_native
    return (qkv * cos) + (_rotate_half(qkv) * sin)
E   RuntimeError: The size of tensor a (64) must match the size of tensor b (32) at non-singleton dimension 4
__________ TestCheckpointResume.test_checkpoint_with_different_config __________
protlig_dd/model/rotary.py:78: in apply_rotary_pos_emb
    return flash_attn.layers.rotary.apply_rotary_emb_qkv_(
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/flash_attn/layers/rotary.py:233: in apply_rotary_emb_qkv_
    return ApplyRotaryEmbQKV_.apply(qkv, cos, sin, cos_k, sin_k, interleaved, seqlen_offsets)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/autograd/function.py:598: in apply
    return super().apply(*args, **kwargs)  # type: ignore[misc]
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/flash_attn/layers/rotary.py:151: in forward
    apply_rotary(
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/flash_attn/ops/triton/rotary.py:202: in apply_rotary
    rotary_kernel[grid](
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/triton/runtime/jit.py:167: in <lambda>
    return lambda *args, **kwargs: self.run(grid=grid, warmup=False, *args, **kwargs)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/triton/runtime/jit.py:425: in run
    kernel.run(grid_0, grid_1, grid_2, kernel.num_warps, kernel.num_ctas,  # number of warps/ctas per instance
E   ValueError: Pointer argument (at 0) cannot be accessed from Triton (cpu tensor?)

During handling of the above exception, another exception occurred:
tests/test_checkpoint_resume.py:390: in test_checkpoint_with_different_config
    trainer1.train(wandb_project='test_chk', wandb_name='test_chk')
protlig_dd/training/run_train_uniref_ddp_polaris.py:2362: in train
    loss, step_time, additional_metrics = self.train_step(batch)
protlig_dd/training/run_train_uniref_ddp_polaris.py:2007: in train_step
    loss = self.compute_loss(batch) / self.cfg.training.accum
protlig_dd/training/run_train_uniref_ddp_polaris.py:1981: in compute_loss
    raise e
protlig_dd/training/run_train_uniref_ddp_polaris.py:1943: in compute_loss
    log_score = model_to_use(perturbed_batch, sigma)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541: in _call_impl
    return forward_call(*args, **kwargs)
protlig_dd/model/transformer_v100.py:588: in forward
    x = self.blocks[i](x, rotary_cos_sin, c, seqlens=None)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541: in _call_impl
    return forward_call(*args, **kwargs)
protlig_dd/model/transformer_v100.py:427: in forward
    qkv = rotary.apply_rotary_pos_emb(
protlig_dd/model/rotary.py:87: in apply_rotary_pos_emb
    return _apply_rotary_pos_emb_native(qkv, cos, sin)
protlig_dd/model/rotary.py:69: in _apply_rotary_pos_emb_native
    return (qkv * cos) + (_rotate_half(qkv) * sin)
E   RuntimeError: The size of tensor a (64) must match the size of tensor b (32) at non-singleton dimension 4
___________ TestCheckpointResume.test_checkpoint_corruption_handling ___________
protlig_dd/model/rotary.py:78: in apply_rotary_pos_emb
    return flash_attn.layers.rotary.apply_rotary_emb_qkv_(
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/flash_attn/layers/rotary.py:233: in apply_rotary_emb_qkv_
    return ApplyRotaryEmbQKV_.apply(qkv, cos, sin, cos_k, sin_k, interleaved, seqlen_offsets)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/autograd/function.py:598: in apply
    return super().apply(*args, **kwargs)  # type: ignore[misc]
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/flash_attn/layers/rotary.py:151: in forward
    apply_rotary(
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/flash_attn/ops/triton/rotary.py:202: in apply_rotary
    rotary_kernel[grid](
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/triton/runtime/jit.py:167: in <lambda>
    return lambda *args, **kwargs: self.run(grid=grid, warmup=False, *args, **kwargs)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/triton/runtime/jit.py:425: in run
    kernel.run(grid_0, grid_1, grid_2, kernel.num_warps, kernel.num_ctas,  # number of warps/ctas per instance
E   ValueError: Pointer argument (at 0) cannot be accessed from Triton (cpu tensor?)

During handling of the above exception, another exception occurred:
tests/test_checkpoint_resume.py:437: in test_checkpoint_corruption_handling
    trainer1.train(wandb_project='test_chk', wandb_name='test_chk')
protlig_dd/training/run_train_uniref_ddp_polaris.py:2362: in train
    loss, step_time, additional_metrics = self.train_step(batch)
protlig_dd/training/run_train_uniref_ddp_polaris.py:2007: in train_step
    loss = self.compute_loss(batch) / self.cfg.training.accum
protlig_dd/training/run_train_uniref_ddp_polaris.py:1981: in compute_loss
    raise e
protlig_dd/training/run_train_uniref_ddp_polaris.py:1943: in compute_loss
    log_score = model_to_use(perturbed_batch, sigma)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541: in _call_impl
    return forward_call(*args, **kwargs)
protlig_dd/model/transformer_v100.py:588: in forward
    x = self.blocks[i](x, rotary_cos_sin, c, seqlens=None)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532: in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
/soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541: in _call_impl
    return forward_call(*args, **kwargs)
protlig_dd/model/transformer_v100.py:427: in forward
    qkv = rotary.apply_rotary_pos_emb(
protlig_dd/model/rotary.py:87: in apply_rotary_pos_emb
    return _apply_rotary_pos_emb_native(qkv, cos, sin)
protlig_dd/model/rotary.py:69: in _apply_rotary_pos_emb_native
    return (qkv * cos) + (_rotate_half(qkv) * sin)
E   RuntimeError: The size of tensor a (64) must match the size of tensor b (32) at non-singleton dimension 4
=============================== warnings summary ===============================
../../../../../../../../../soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/jupyter_client/connect.py:22
  /soft/applications/conda/2024-04-29/mconda3/lib/python3.11/site-packages/jupyter_client/connect.py:22: DeprecationWarning: Jupyter is migrating its paths to use standard platformdirs
  given by the platformdirs library.  To remove this warning and
  see the appropriate new directories, set the environment variable
  `JUPYTER_PLATFORM_DIRS=1` and then run `jupyter --paths`.
  The use of platformdirs will be the default in `jupyter_core` v6
    from jupyter_core.paths import jupyter_data_dir, jupyter_runtime_dir, secure_write

tests/test_checkpoint_resume.py::TestCheckpointResume::test_checkpoint_creation
tests/test_checkpoint_resume.py::TestCheckpointResume::test_checkpoint_resume
tests/test_checkpoint_resume.py::TestCheckpointResume::test_fresh_start_ignores_checkpoint
tests/test_checkpoint_resume.py::TestCheckpointResume::test_checkpoint_with_different_config
tests/test_checkpoint_resume.py::TestCheckpointResume::test_checkpoint_corruption_handling
  /soft/applications/conda/2024-04-29/mconda3/lib/python3.11/multiprocessing/popen_fork.py:66: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
    self.pid = os.fork()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_checkpoint_resume.py::TestCheckpointResume::test_checkpoint_creation
FAILED tests/test_checkpoint_resume.py::TestCheckpointResume::test_checkpoint_resume
FAILED tests/test_checkpoint_resume.py::TestCheckpointResume::test_fresh_start_ignores_checkpoint
FAILED tests/test_checkpoint_resume.py::TestCheckpointResume::test_checkpoint_with_different_config
FAILED tests/test_checkpoint_resume.py::TestCheckpointResume::test_checkpoint_corruption_handling
======================== 5 failed, 6 warnings in 11.31s ========================
